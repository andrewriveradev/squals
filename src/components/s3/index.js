/* eslint no-unused-vars: ["error", { "args": "none" }] */
import { isEmpty, intersection } from 'lodash-es'
import {
  validations,
  properties as importedValidProperties
} from '../validations/s3-validations.js'

import randomWord from 'random-word'
import Randoma from 'randoma'

// const Randoma = require('randoma');
// const randomWord = require();

export class S3BucketPolicy {
  constructor (props = {}) {
    this.a = { ...props }
  }
}

/** Class representing a point. */
export class S3Bucket {
  /**
   * Create an S3Bucket.
   *
   * @description S3 Object maker
   * @param {string} name - A name used for `Ref`, `Fn:Gett` and other getters. The Default is an autogenerated {word}-{word}-{number}.
   * @param {Object} props - The properties config input object.
   * @param {string} props.BucketName - Is a way to set the created BucketName.
   * @param {string} props.AccessControl - Is a way to set the created BucketName.
   * @param {Object} props.AccelerateConfiguration - Is a way to set the created BucketName.
   * @param {Array} props.AnalyticsConfiguration - Is a way to set the created BucketName.
   * @param {Object} props.BucketEncryption - Is a way to set the created BucketName.
   * @param {Array.<Object>} props.BucketEncryption.ServerSideEncryptionConfiguration - Specifies the server-side encryption by default configuration.
   * @param {Object} props.CorsConfiguration - Is a way to set the created BucketName.
   * @param {Array} props.CorsConfiguration.CorsRules - Is a way to set the created BucketName.
   * @param {Array} props.InventoryConfiguration - Is a way to set the created BucketName.
   * @param {Object} props.LifecycleConfiguration - Is a way to set the created BucketName.
   * @param {Object} props.LoggingConfiguration - Is a way to set the created BucketName.
   * @param {Array} props.MetricsConfiguration - Is a way to set the created BucketName.
   * @param {Object} props.NotificationConfiguration - Is a way to set the created BucketName.
   * @param {Object} props.PublicAccessBlockConfiguration - Is a way to set the created BucketName.
   * @param {Object} props.ReplicationConfiguration - Is a way to set the created BucketName.
   * @param {Array} props.Tags - Is a way to set the created BucketName.
   * @param {Object} props.VersioningConfiguration - Is a way to set the created BucketName.
   * @param {Object} props.WebsiteConfiguration - Is a way to set the created BucketName.
   * @example
   *  var ImportES = require('esm')(module)
   *  var S3Bucket = ImportES('./src/S3.js')
   *  var myBucket = new S3Bucket() // will use ALL defaults suchas auto-gen bucketname
   */
  constructor (name = null, props = {}) {
    this.Type = 'AWS::S3::Bucket'
    this.name =
      name ||
      `${randomWord()}-${randomWord()}-${new Randoma({
        seed: new Date().getTime()
      }).integer()}`

    if (Object.keys(props).length > 0) {
      const validProps = Object.entries(props).reduce((a, [k, v]) => {
        if (
          intersection(Object.keys(props), importedValidProperties).includes(k)
        ) {
          a[k] = v
        }
        return a
      }, {})
      // console.log({ validProps })
      this.Properties = { ...validProps }
    }
  }

  toJSON () {
    const printable = Object.entries(this.Properties).reduce((a, [k, v]) => {
      if (v && !isEmpty(v)) a[k] = v
      return a
    }, {})
    return {
      [this.name]: {
        Type: this.Type,
        Properties: { ...printable }
      }
    }
  }

  Ref () {
    /**
     * When the logical ID of this resource is provided to the Ref intrinsic function,
     * Ref returns the resource name.
     * Example: mystack-mybucket-kdwwxmddtr2g.
     * */
    return { Ref: this.name }
  }

  Arn () {
    /**
     * Returns the Amazon Resource Name (ARN) of the specified bucket.
     * Example: arn:aws:s3:::mybucket
     * */
    return { 'Fn::GetAtt': [this.name, 'Arn'] }
  }

  DomainName () {
    /**
     * Returns the IPv4 DNS name of the specified bucket.
     * Example: mystack-mybucket-kdwwxmddtr2g.s3.amazonaws.com
     * Or with a `DualStackDomainName` it returns the IPv6 DNS name of the specified bucket.
     *
     * Example: mystack-mybucket-kdwwxmddtr2g.s3.dualstack.us-east-2.amazonaws.com
     */
    return { 'Fn::GetAtt': [this.name, 'DomainName'] }
  }

  RegionalDomainName () {
    /**
     * Returns the regional domain name of the specified bucket
     * Example: mystack-mybucket-kdwwxmddtr2g.s3.us-east-2.amazonaws.com
     */

    return { 'Fn::GetAtt': [this.name, 'RegionalDomainName'] }
  }

  WebsiteURL () {
    /**
     * Returns the Amazon S3 website endpoint for the specified bucket.
     * Example (IPv4): http://mystack-mybucket-kdwwxmddtr2g.s3-website-us-east-2.amazonaws.com/
     * Example (IPv6): http://mystack-mybucket-kdwwxmddtr2g.s3.dualstack.us-east-2.amazonaws.com/
     */
    return { 'Fn::GetAtt': [this.name, 'WebsiteURL'] }
  }

  outputs () {
    return {
      [`${this.logicalName}-websiteURL`]: {
        Description: 'The WebsiteURL of the S3Bucket',
        Value: this.WebsiteURL()
      },
      InstanceID: {
        Description: 'The Instance ID',
        Value: { Ref: 'EC2Instance' }
      }
    }
  }
  validate () {
    const testStatusBuilder = (passing = true, msgAccum = {}) => {
      return (pass, addMsg) => {
        msgAccum = pass ? { ...msgAccum } : { ...msgAccum, ...addMsg }
        passing = passing && pass
        return {
          test: pass,
          allTestsPass: passing,
          failMsgs: msgAccum
        }
      }
    }
    const didTestPass = testStatusBuilder()

    const { allTestsPass, failMsgs } = validations(this).reduce((p, t) => {
      return didTestPass(t.test, t.msg)
    })
    return { passes: allTestsPass, failMsgs }
  }
}
