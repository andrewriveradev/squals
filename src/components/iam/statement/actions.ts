export function actions () {
  return {
    aws: {
      disableRegion: 'accounts:DisableRegion',
      enableRegion: 'accounts:EnableRegion',
      listRegions: 'accounts:ListRegions'
    },
    appMesh: {
      createMesh: 'appmesh:CreateMesh',
      createRoute: 'appmesh:CreateRoute',
      createVirtualNode: 'appmesh:CreateVirtualNode',
      createVirtualRouter: 'appmesh:CreateVirtualRouter',
      createVirtualService: 'appmesh:CreateVirtualService',
      deleteMesh: 'appmesh:DeleteMesh',
      deleteRoute: 'appmesh:DeleteRoute',
      deleteVirtualNode: 'appmesh:DeleteVirtualNode',
      deleteVirtualRouter: 'appmesh:DeleteVirtualRouter',
      deleteVirtualService: 'appmesh:DeleteVirtualService',
      describeMesh: 'appmesh:DescribeMesh',
      describeRoute: 'appmesh:DescribeRoute',
      describeVirtualNode: 'appmesh:DescribeVirtualNode',
      describeVirtualRouter: 'appmesh:DescribeVirtualRouter',
      describeVirtualService: 'appmesh:DescribeVirtualService',
      listMeshes: 'appmesh:ListMeshes',
      listRoutes: 'appmesh:ListRoutes',
      listTagsForResource: 'appmesh:ListTagsForResource',
      listVirtualNodes: 'appmesh:ListVirtualNodes',
      listVirtualRouters: 'appmesh:ListVirtualRouters',
      listVirtualServices: 'appmesh:ListVirtualServices',
      tagResource: 'appmesh:TagResource',
      untagResource: 'appmesh:UntagResource',
      updateMesh: 'appmesh:UpdateMesh',
      updateRoute: 'appmesh:UpdateRoute',
      updateVirtualNode: 'appmesh:UpdateVirtualNode',
      updateVirtualRouter: 'appmesh:UpdateVirtualRouter',
      updateVirtualService: 'appmesh:UpdateVirtualService'
    },
    s3: {
      ALL: 's3:*',
      ALLgets: 's3:Get*',
      ALLlist: 's3:List*',
      abortMultiPartUpload: 's3:AbortMultipartUpload',
      createBucket: 's3:CreateBucket',
      createJob: 's3:CreateJob',
      deleteBukcet: 's3:DeleteBucket',
      deleteBucketPolicy: 's3:DeleteBucketPolicy',
      deleteBucketWebsite: 's3:DeleteBucketWebsite',
      deleteObject: 's3:DeleteObject',
      deleteObjectTagging: 's3:DeleteObjectTagging 	',
      deleteObjectVersion: 's3:DeleteObjectVersion',
      deleteObjectVersionTagging: 's3:DeleteObjectVersionTagging',
      describeJob: 's3:DescribeJob',
      getAccelerateConfiguration: 's3:GetAccelerateConfiguration 	',
      getAccountPublicAccessBlock: 's3:GetAccountPublicAccessBlock',
      getAnalyticsConfiguration: 's3:GetAnalyticsConfiguration',
      getBucketAcl: 's3:GetBucketAcl',
      getBucketCORS: 's3:GetBucketCORS',
      getBucketLocation: 's3:GetBucketLocation',
      getBucketNotification: 's3:GetBucketNotification',
      getBucketObjectLockConfiguration: 's3:GetBucketObjectLockConfiguration',
      getBucketPolicy: 's3:GetBucketPolicy',
      getBucketPolicyStatus: 's3:GetBucketPolicyStatus',
      getBucketPublicAccessBlock: 's3:GetBucketPublicAccessBlock',
      getBucketRequestPayment: 's3:GetBucketRequestPayment',
      getBucketTagging: 's3:GetBucketTagging',
      getBucketVersioning: 's3:GetBucketVersioning',
      getBucketWebsite: 's3:GetBucketWebsite',
      getEncryptionConfiguration: 's3:GetEncryptionConfiguration',
      getInventoryConfiguration: 's3:GetInventoryConfiguration',
      getLifecycleConfiguration: 's3:GetLifecycleConfiguration',
      getMetricsConfiguration: 's3:GetMetricsConfiguration',
      getObject: 's3:GetObject',
      getObjectAcl: 's3:GetObjectAcl',
      getObjectLegalHold: 's3:GetObjectLegalHold',
      getObjectRetention: 's3:GetObjectRetention',
      getObjectTagging: 's3:GetObjectTagging',
      getObjectTorrent: 's3:GetObjectTorrent',
      getObjectVersion: 's3:GetObjectVersion',
      getObjectVersionAcl: 's3:GetObjectVersionAcl',
      getObjectVersionForReplication: 's3:GetObjectVersionForReplication',
      getObjectVersionTagging: 's3:GetObjectVersionTagging',
      getObjectVersionTorrent: 's3:GetObjectVersionTorrent',
      getReplicationConfiguration: 's3:GetReplicationConfiguration',
      listAllMyBuckets: 's3:ListAllMyBuckets',
      listBucket: 's3:ListBucket',
      listBucketByTags: 's3:ListBucketByTags',
      listBucketMultipartUploads: 's3:ListBucketMultipartUploads',
      listBucketVersions: 's3:ListBucketVersions',
      listJobs: 's3:ListJobs',
      listMultipartUploadParts: 's3:ListMultipartUploadParts',
      objectOwnerOverrideToBucketOwner: 's3:ObjectOwnerOverrideToBucketOwner',
      putAccelerateConfiguration: 's3:PutAccelerateConfiguration',
      putAccountPublicAccessBlock: 's3:PutAccountPublicAccessBlock',
      putAnalyticsConfiguration: 's3:PutAnalyticsConfiguration',
      putBucketAcl: 's3:PutBucketAcl',
      putBucketCORS: 's3:PutBucketCORS',
      putBucketLogging: 's3:PutBucketLogging',
      putBucketNotification: 's3:PutBucketNotification',
      putBucketObjectLockConfiguration: 's3:PutBucketObjectLockConfiguration',
      putBucketPolicy: 's3:PutBucketPolicy',
      putBucketPublicAccessBlock: 's3:PutBucketPublicAccessBlock',
      putBucketRequestPayment: 's3:PutBucketRequestPayment',
      putBucketTagging: 's3:PutBucketTagging',
      putBucketVersioning: 's3:PutBucketVersioning',
      putBucketWebsite: 's3:PutBucketWebsite',
      putEncryptionConfiguration: 's3:PutEncryptionConfiguration',
      putInventoryConfiguration: 's3:PutInventoryConfiguration',
      putLifecycleConfiguration: 's3:PutLifecycleConfiguration',
      putMetricsConfiguration: 's3:PutMetricsConfiguration',
      putObject: 's3:PutObject',
      putObjectAcl: 's3:PutObjectAcl',
      putObjectLegalHold: 's3:PutObjectLegalHold',
      putObjectRetention: 's3:PutObjectRetention',
      putObjectTagging: 's3:PutObjectTagging',
      putObjectVersionAcl: 's3:PutObjectVersionAcl',
      putObjectVersionTagging: 's3:PutObjectVersionTagging',
      putReplicationConfiguration: 's3:PutReplicationConfiguration',
      replicateDelete: 's3:ReplicateDelete',
      replicateObject: 's3:ReplicateObject',
      replicateTags: 's3:ReplicateTags',
      restoreObject: 's3:RestoreObject',
      updateJobPriority: 's3:UpdateJobPriority',
      updateJobStatus: 's3:UpdateJobStatus',
      _lists: {
        BASIC: ['s3:Get*', 's3:PutObject', 's3:ListBucket', 's3:ListBucketVersions']
      }
    },
    certificate: {
      addTagsToCertificate: 'acm:AddTagsToCertificate',
      deleteCertificate: 'acm:DeleteCertificate',
      describeCertificate: 'acm:DescribeCertificate',
      exportCertificate: 'acm:ExportCertificate',
      getCertificate: 'acm:GetCertificate',
      importCertificate: 'acm:ImportCertificate',
      listCertificates: 'acm:ListCertificates',
      listTagsForCertificate: 'acm:ListTagsForCertificate',
      removeTagsFromCertificate: 'acm:RemoveTagsFromCertificate',
      renewCertificate: 'acm:RenewCertificate',
      requestCertificate: 'acm:RequestCertificate',
      resendValidationEmail: 'acm:ResendValidationEmail',
      updateCertificateOptions: 'acm:UpdateCertificateOptions'
    },
    budget: {
      modifyBudget: 'budgets:ModifyBudget',
      viewBudget: 'budgets:ViewBudget'
    },
    cloudfront: {
      createCloudFrontOriginAccessIdentity: 'cloudfront:CreateCloudFrontOriginAccessIdentity',
      createDistribution: 'cloudfront:CreateDistribution',
      createDistributionWithTags: 'cloudfront:CreateDistributionWithTags',
      createInvalidation: 'cloudfront:CreateInvalidation',
      createStreamingDistribution: 'cloudfront:CreateStreamingDistribution',
      createStreamingDistributionWithTags: 'cloudfront:CreateStreamingDistributionWithTags',
      deleteCloudFrontOriginAccessIdentity: 'cloudfront:DeleteCloudFrontOriginAccessIdentity',
      deleteDistribution: 'cloudfront:DeleteDistribution',
      deleteStreamingDistribution: 'cloudfront:DeleteStreamingDistribution',
      getCloudFrontOriginAccessIdentity: 'cloudfront:GetCloudFrontOriginAccessIdentity',
      getCloudFrontOriginAccessIdentityConfig: 'cloudfront:GetCloudFrontOriginAccessIdentityConfig',
      getDistribution: 'cloudfront:GetDistribution',
      getDistributionConfig: 'cloudfront:GetDistributionConfig',
      getInvalidation: 'cloudfront:GetInvalidation',
      getStreamingDistribution: 'cloudfront:GetStreamingDistribution',
      getStreamingDistributionConfig: 'cloudfront:GetStreamingDistributionConfig',
      listCloudFrontOriginAccessIdentities: 'cloudfront:ListCloudFrontOriginAccessIdentities',
      listDistributions: 'cloudfront:ListDistributions',
      listDistributionsByWebACLId: 'cloudfront:ListDistributionsByWebACLId',
      listInvalidations: 'cloudfront:ListInvalidations',
      listStreamingDistributions: 'cloudfront:ListStreamingDistributions',
      listTagsForResource: 'cloudfront:ListTagsForResource',
      tagResource: 'cloudfront:TagResource',
      untagResource: 'cloudfront:UntagResource',
      updateCloudFrontOriginAccessIdentity: 'cloudfront:UpdateCloudFrontOriginAccessIdentity',
      updateDistribution: 'cloudfront:UpdateDistribution',
      updateStreamingDistribution: 'cloudfront:UpdateStreamingDistribution'
    },
    cloudformation: {
      cancelUpdateStack: 'cloudformation:CancelUpdateStack',
      createChangeSet: 'cloudformation:CreateChangeSet',
      createStack: 'cloudformation:CreateStack',
      createStackInstances: 'cloudformation:CreateStackInstances',
      createStackSet: 'cloudformation:CreateStackSet',
      createUploadBucket: 'cloudformation:CreateUploadBucket',
      deleteChangeSet: 'cloudformation:DeleteChangeSet',
      deleteStack: 'cloudformation:DeleteStack',
      deleteStackInstances: 'cloudformation:DeleteStackInstances',
      deleteStackSet: 'cloudformation:DeleteStackSet',
      describeAccountLimits: 'cloudformation:DescribeAccountLimits',
      describeChangeSet: 'cloudformation:DescribeChangeSet',
      describeStackDriftDetectionStatus: 'cloudformation:DescribeStackDriftDetectionStatus',
      describeStackEvents: 'cloudformation:DescribeStackEvents',
      describeStackInstance: 'cloudformation:DescribeStackInstance',
      describeStackResource: 'cloudformation:DescribeStackResource',
      describeStackResourceDrifts: 'cloudformation:DescribeStackResourceDrifts',
      describeStackResources: 'cloudformation:DescribeStackResources',
      describeStackSet: 'cloudformation:DescribeStackSet',
      describeStackSetOperation: 'cloudformation:DescribeStackSetOperation',
      describeStacks: 'cloudformation:DescribeStacks',
      detectStackDrift: 'cloudformation:DetectStackDrift',
      detectStackResourceDrift: 'cloudformation:DetectStackResourceDrift',
      estimateTemplateCost: 'cloudformation:EstimateTemplateCost',
      executeChangeSet: 'cloudformation:ExecuteChangeSet',
      getStackPolicy: 'cloudformation:GetStackPolicy',
      getTemplate: 'cloudformation:GetTemplate',
      getTemplateSummary: 'cloudformation:GetTemplateSummary',
      listChangeSets: 'cloudformation:ListChangeSets',
      listExports: 'cloudformation:ListExports',
      listImports: 'cloudformation:ListImports',
      listStackInstances: 'cloudformation:ListStackInstances',
      listStackResources: 'cloudformation:ListStackResources',
      listStackSetOperationResults: 'cloudformation:ListStackSetOperationResults',
      listStackSetOperations: 'cloudformation:ListStackSetOperations',
      listStackSets: 'cloudformation:ListStackSets',
      listStacks: 'cloudformation:ListStacks',
      setStackPolicy: 'cloudformation:SetStackPolicy	',
      signalResource: 'cloudformation:SignalResource',
      stopStackSetOperation: 'cloudformation:StopStackSetOperation',
      updateStack: 'cloudformation:UpdateStack',
      updateStackInstances: 'cloudformation:UpdateStackInstances',
      updateStackSet: 'cloudformation:UpdateStackSet',
      updateTerminationProtection: 'cloudformation:UpdateTerminationProtection',
      validateTemplate: 'cloudformation:ValidateTemplate'
    },
    cloudwatch: {
      deleteAlarms: 'cloudwatch:DeleteAlarms',
      deleteDashboards: 'cloudwatch:DeleteDashboards',
      describeAlarmHistory: 'cloudwatch:DescribeAlarmHistory',
      describeAlarms: 'cloudwatch:DescribeAlarms',
      describeAlarmsForMetric: 'cloudwatch:DescribeAlarmsForMetric',
      disableAlarmActions: 'cloudwatch:DisableAlarmActions',
      enableAlarmActions: 'cloudwatch:EnableAlarmActions',
      getDashboard: 'cloudwatch:GetDashboard',
      getMetricData: 'cloudwatch:GetMetricData',
      getMetricStatistics: 'cloudwatch:GetMetricStatistics',
      getMetricWidgetImage: 'cloudwatch:GetMetricWidgetImage',
      listDashboards: 'cloudwatch:ListDashboards',
      listMetrics: 'cloudwatch:ListMetrics',
      listTagsForResource: 'cloudwatch:ListTagsForResource',
      putDashboard: 'cloudwatch:PutDashboard',
      putMetricAlarm: 'cloudwatch:PutMetricAlarm',
      putMetricData: 'cloudwatch:PutMetricData',
      setAlarmState: 'cloudwatch:SetAlarmState',
      tagResource: 'cloudwatch:TagResource',
      untagResource: 'cloudwatch:UntagResource'
    },
    cloudwatchEvents: {
      deleteRule: 'events:DeleteRule',
      describeEventBus: 'events:DescribeEventBus',
      describeRule: 'events:DescribeRule',
      disableRule: 'events:DisableRule',
      enableRule: 'events:EnableRule',
      listRuleNamesByTarget: 'events:ListRuleNamesByTarget',
      listRules: 'events:ListRules',
      listTagsForResource: 'events:ListTagsForResource',
      listTargetsByRule: 'events:ListTargetsByRule',
      putEvents: 'events:PutEvents',
      putPermission: 'events:PutPermission',
      putRule: 'events:PutRule',
      putTargets: 'events:PutTargets',
      removePermission: 'events:RemovePermission',
      rRemoveTargets: 'events:RemoveTargets',
      tagResource: 'events:TagResource',
      testEventPattern: 'events:TestEventPattern',
      untagResource: 'events:UntagResource'
    },
    cloudwatchLogs: {
      associateKmsKey: 'logs:AssociateKmsKey',
      cancelExportTask: 'logs:CancelExportTask',
      createExportTask: 'logs:CreateExportTask',
      createLogDelivery: 'logs:CreateLogDelivery',
      createLogGroup: 'logs:CreateLogGroup',
      createLogStream: 'logs:CreateLogStream',
      deleteDestination: 'logs:DeleteDestination',
      deleteLogDelivery: 'logs:DeleteLogDelivery ',
      deleteLogGroup: 'logs:DeleteLogGroup',
      deleteLogStream: 'logs:DeleteLogStream',
      deleteMetricFilter: 'logs:DeleteMetricFilter',
      deleteResourcePolicy: 'logs:DeleteResourcePolicy',
      deleteRetentionPolicy: 'logs:DeleteRetentionPolicy',
      deleteSubscriptionFilter: 'logs:DeleteSubscriptionFilter',
      describeDestinations: 'logs:DescribeDestinations',
      describeExportTasks: 'logs:DescribeExportTasks',
      describeLogGroups: 'logs:DescribeLogGroups',
      describeLogStreams: 'logs:DescribeLogStreams',
      describeMetricFilters: 'logs:DescribeMetricFilters',
      describeQueries: 'logs:DescribeQueries',
      describeResourcePolicies: 'logs:DescribeResourcePolicies',
      describeSubscriptionFilters: 'logs:DescribeSubscriptionFilters',
      disassociateKmsKey: 'logs:DisassociateKmsKey',
      filterLogEvents: 'logs:FilterLogEvents',
      getLogDelivery: 'logs:GetLogDelivery',
      getLogEvents: 'logs:GetLogEvents',
      getLogGroupFields: 'logs:GetLogGroupFields',
      getLogRecord: 'logs:GetLogRecord',
      getQueryResults: 'logs:GetQueryResults',
      listLogDeliveries: 'logs:ListLogDeliveries',
      listTagsLogGroup: 'logs:ListTagsLogGroup',
      putDestination: 'logs:PutDestination',
      putDestinationPolicy: 'logs:PutDestinationPolicy',
      putLogEvents: 'logs:PutLogEvents',
      putMetricFilter: 'logs:PutMetricFilter',
      putResourcePolicy: 'logs:PutResourcePolicy',
      putRetentionPolicy: 'logs:PutRetentionPolicy',
      putSubscriptionFilter: 'logs:PutSubscriptionFilter',
      startQuery: 'logs:StartQuery',
      stopQuery: 'logs:StopQuery',
      tagLogGroup: 'logs:TagLogGroup',
      testMetricFilter: 'logs:TestMetricFilter',
      untagLogGroup: 'logs:UntagLogGroup',
      updateLogDelivery: 'logs:UpdateLogDelivery'
    },
    codeBuild: {
      batchDeleteBuilds: 'codebuild:BatchDeleteBuilds',
      batchGetBuilds: 'codebuild:BatchGetBuilds',
      batchGetProjects: 'codebuild:BatchGetProjects',
      createProject: 'codebuild:CreateProject',
      createWebhook: 'codebuild:CreateWebhook',
      deleteOAuthToken: 'codebuild:DeleteOAuthToken',
      deleteProject: 'codebuild:DeleteProject',
      deleteSourceCredentials: 'codebuild:DeleteSourceCredentials',
      deleteWebhook: 'codebuild:DeleteWebhook',
      importSourceCredentials: 'codebuild:ImportSourceCredentials',
      invalidateProjectCache: 'codebuild:InvalidateProjectCache',
      listBuilds: 'codebuild:ListBuilds',
      listBuildsForProject: 'codebuild:ListBuildsForProject',
      listConnectedOAuthAccounts: 'codebuild:ListConnectedOAuthAccounts',
      listCuratedEnvironmentImages: 'codebuild:ListCuratedEnvironmentImages',
      listProjects: 'codebuild:ListProjects',
      listRepositories: 'codebuild:ListRepositories',
      listSourceCredentials: 'codebuild:ListSourceCredentials',
      persistOAuthToken: 'codebuild:PersistOAuthToken',
      startBuild: 'codebuild:StartBuild',
      stopBuild: 'codebuild:StopBuild',
      updateProject: 'codebuild:UpdateProject',
      udateWebhook: 'codebuild:UpdateWebhook'
    },
    codeCommit: {
      batchDescribeMergeConflicts: 'codecommit:BatchDescribeMergeConflicts',
      batchGetPullRequests: 'codecommit:BatchGetPullRequests',
      batchGetRepositories: 'codecommit:BatchGetRepositories',
      cancelUploadArchive: 'codecommit:CancelUploadArchive',
      createBranch: 'codecommit:CreateBranch',
      createCommit: 'codecommit:CreateCommit',
      createPullRequest: 'codecommit:CreatePullRequest',
      createRepository: 'codecommit:CreateRepository',
      createUnreferencedMergeCommit: 'codecommit:CreateUnreferencedMergeCommit',
      deleteBranch: 'codecommit:DeleteBranch',
      deleteCommentContent: 'codecommit:DeleteCommentContent',
      deleteFile: 'codecommit:DeleteFile',
      deleteRepository: 'codecommit:DeleteRepository',
      describeMergeConflicts: 'codecommit:DescribeMergeConflicts',
      describePullRequestEvents: 'codecommit:DescribePullRequestEvents',
      getBlob: 'codecommit:GetBlob',
      getBranch: 'codecommit:GetBranch',
      getComment: 'codecommit:GetComment',
      getCommentsForComparedCommit: 'codecommit:GetCommentsForComparedCommit',
      getCommentsForPullRequest: 'codecommit:GetCommentsForPullRequest',
      getCommit: 'codecommit:GetCommit',
      getCommitHistory: 'codecommit:GetCommitHistory',
      getCommitsFromMergeBase: 'codecommit:GetCommitsFromMergeBase',
      getDifferences: 'codecommit:GetDifferences',
      getFile: 'codecommit:GetFile ',
      getFolder: 'codecommit:GetFolder',
      getMergeCommit: 'codecommit:GetMergeCommit',
      getMergeConflicts: 'codecommit:GetMergeConflicts',
      getMergeOptions: 'codecommit:GetMergeOptions',
      getObjectIdentifier: 'codecommit:GetObjectIdentifier',
      getPullRequest: 'codecommit:GetPullRequest',
      getReferences: 'codecommit:GetReferences',
      getRepository: 'codecommit:GetRepository',
      getRepositoryTriggers: 'codecommit:GetRepositoryTriggers',
      getTree: 'codecommit:GetTree ',
      getUploadArchiveStatus: 'codecommit:GetUploadArchiveStatus',
      gitPull: 'codecommit:GitPull ',
      gitPush: 'codecommit:GitPush',
      listBranches: 'codecommit:ListBranches',
      listPullRequests: 'codecommit:ListPullRequests',
      listRepositories: 'codecommit:ListRepositories',
      listTagsForResource: 'codecommit:ListTagsForResource',
      mergeBranchesByFastForward: 'codecommit:MergeBranchesByFastForward',
      mergeBranchesBySquash: 'codecommit:MergeBranchesBySquash',
      mergeBranchesByThreeWay: 'codecommit:MergeBranchesByThreeWay',
      mergePullRequestByFastForward: 'codecommit:MergePullRequestByFastForward',
      mergePullRequestBySquash: 'codecommit:MergePullRequestBySquash',
      mergePullRequestByThreeWay: 'codecommit:MergePullRequestByThreeWay',
      potCommentForComparedCommit: 'codecommit:PostCommentForComparedCommit',
      postCommentReply: 'codecommit:PostCommentReply',
      putFile: 'codecommit:PutFile',
      putRepositoryTriggers: 'codecommit:PutRepositoryTriggers',
      tagResource: 'codecommit:TagResource',
      testRepositoryTriggers: 'codecommit:TestRepositoryTriggers',
      untagResource: 'codecommit:UntagResource',
      updateComment: 'codecommit:UpdateComment',
      updateDefaultBranch: 'codecommit:UpdateDefaultBranch',
      updatePullRequestDescription: 'codecommit:UpdatePullRequestDescription',
      updatePullRequestStatus: 'codecommit:UpdatePullRequestStatus',
      updatePullRequestTitle: 'codecommit:UpdatePullRequestTitle',
      updateRepositoryDescription: 'codecommit:UpdateRepositoryDescription',
      updateRepositoryName: 'codecommit:UpdateRepositoryName',
      uploadArchive: 'codecommit:UploadArchive'
    },
    codeDeploy: {
      addTagsToOnPremisesInstancesç: 'codedeploy:AddTagsToOnPremisesInstances',
      batchGetApplicationRevisionsç: 'codedeploy:BatchGetApplicationRevisions',
      batchGetApplicationsç: 'codedeploy:BatchGetApplications',
      batchGetDeploymentGroupsç: 'codedeploy:BatchGetDeploymentGroups',
      batchGetDeploymentInstancesç: 'codedeploy:BatchGetDeploymentInstances',
      batchGetDeploymentsç: 'codedeploy:BatchGetDeployments',
      batchGetOnPremisesInstancesç: 'codedeploy:BatchGetOnPremisesInstances',
      continueDeploymentç: 'codedeploy:ContinueDeployment',
      createApplicationç: 'codedeploy:CreateApplication',
      createDeploymentç: 'codedeploy:CreateDeployment',
      createDeploymentConfigç: 'codedeploy:CreateDeploymentConfig',
      createDeploymentGroupç: 'codedeploy:CreateDeploymentGroup',
      deleteApplicationç: 'codedeploy:DeleteApplication',
      deleteDeploymentConfigç: 'codedeploy:DeleteDeploymentConfig',
      deleteDeploymentGroupç: 'codedeploy:DeleteDeploymentGroup',
      deregisterOnPremisesInstanceç: 'codedeploy:DeregisterOnPremisesInstance',
      getApplicationç: 'codedeploy:GetApplication',
      getApplicationRevisionç: 'codedeploy:GetApplicationRevision',
      getDeploymentç: 'codedeploy:GetDeployment',
      getDeploymentConfigç: 'codedeploy:GetDeploymentConfig',
      getDeploymentGroupç: 'codedeploy:GetDeploymentGroup',
      getDeploymentInstanceç: 'codedeploy:GetDeploymentInstance',
      getOnPremisesInstanceç: 'codedeploy:GetOnPremisesInstance',
      listApplicationRevisionsç: 'codedeploy:ListApplicationRevisions',
      listApplicationsç: 'codedeploy:ListApplications',
      listDeploymentConfigsç: 'codedeploy:ListDeploymentConfigs',
      listDeploymentGroupsç: 'codedeploy:ListDeploymentGroups',
      listDeploymentInstancesç: 'codedeploy:ListDeploymentInstances',
      listDeploymentsç: 'codedeploy:ListDeployments',
      listOnPremisesInstancesç: 'codedeploy:ListOnPremisesInstances',
      putLifecycleEventHookExecutionStatusç: 'codedeploy:PutLifecycleEventHookExecutionStatus',
      registerApplicationRevisionç: 'codedeploy:RegisterApplicationRevision',
      registerOnPremisesInstanceç: 'codedeploy:RegisterOnPremisesInstance',
      removeTagsFromOnPremisesInstancesç: 'codedeploy:RemoveTagsFromOnPremisesInstances',
      stopDeploymentç: 'codedeploy:StopDeployment',
      updateApplicationç: 'codedeploy:UpdateApplication',
      updateDeploymentGroupç: 'codedeploy:UpdateDeploymentGroup'
    },
    codePipeline: {
      acknowledgeJob: 'codepipeline:AcknowledgeJob',
      acknowledgeThirdPartyJob: 'codepipeline:AcknowledgeThirdPartyJob',
      createCustomActionType: 'codepipeline:CreateCustomActionType',
      createPipeline: 'codepipeline:CreatePipeline',
      deleteCustomActionType: 'codepipeline:DeleteCustomActionType',
      deletePipeline: 'codepipeline:DeletePipeline',
      deleteWebhook: 'codepipeline:DeleteWebhook',
      deregisterWebhookWithThirdParty: 'codepipeline:DeregisterWebhookWithThirdParty',
      disableStageTransition: 'codepipeline:DisableStageTransition',
      enableStageTransition: 'codepipeline:EnableStageTransition',
      getJobDetails: 'codepipeline:GetJobDetails',
      getPipeline: 'codepipeline:GetPipeline',
      getPipelineExecution: 'codepipeline:GetPipelineExecution',
      getPipelineState: 'codepipeline:GetPipelineState',
      getThirdPartyJobDetails: 'codepipeline:GetThirdPartyJobDetails',
      listActionExecutions: 'codepipeline:ListActionExecutions',
      listActionTypes: 'codepipeline:ListActionTypes',
      listPipelineExecutions: 'codepipeline:ListPipelineExecutions',
      listPipelines: 'codepipeline:ListPipelines',
      listTagsForResource: 'codepipeline:ListTagsForResource',
      listWebhooks: 'codepipeline:ListWebhooks',
      pollForJobs: 'codepipeline:PollForJobs',
      pollForThirdPartyJobs: 'codepipeline:PollForThirdPartyJobs',
      putActionRevision: 'codepipeline:PutActionRevision',
      putApprovalResult: 'codepipeline:PutApprovalResult',
      putJobFailureResult: 'codepipeline:PutJobFailureResult',
      putJobSuccessResult: 'codepipeline:PutJobSuccessResult',
      putThirdPartyJobFailureResult: 'codepipeline:PutThirdPartyJobFailureResult',
      putThirdPartyJobSuccessResult: 'codepipeline:PutThirdPartyJobSuccessResult',
      putWebhook: 'codepipeline:PutWebhook',
      registerWebhookWithThirdParty: 'codepipeline:RegisterWebhookWithThirdParty',
      retryStageExecution: 'codepipeline:RetryStageExecution',
      startPipelineExecution: 'codepipeline:StartPipelineExecution',
      tagResource: 'codepipeline:TagResource',
      untagResource: 'codepipeline:UntagResource',
      pdatePipeline: 'codepipeline:UpdatePipeline'
    },
    cognito: {
      createIdentityPool: 'cognito-identity:CreateIdentityPool',
      deleteIdentities: 'cognito-identity:DeleteIdentities',
      deleteIdentityPool: 'cognito-identity:DeleteIdentityPool',
      describeIdentity: 'cognito-identity:DescribeIdentity',
      describeIdentityPool: 'cognito-identity:DescribeIdentityPool',
      getCredentialsForIdentity: 'cognito-identity:GetCredentialsForIdentity',
      getId: 'cognito-identity:GetId',
      getIdentityPoolRoles: 'cognito-identity:GetIdentityPoolRoles',
      getOpenIdToken: 'cognito-identity:GetOpenIdToken',
      getOpenIdTokenForDeveloperIdentity: 'cognito-identity:GetOpenIdTokenForDeveloperIdentity',
      listIdentities: 'cognito-identity:ListIdentities',
      listIdentityPools: 'cognito-identity:ListIdentityPools',
      listTagsForResource: 'cognito-identity:ListTagsForResource',
      lookupDeveloperIdentity: 'cognito-identity:LookupDeveloperIdentity',
      mergeDeveloperIdentities: 'cognito-identity:MergeDeveloperIdentities',
      setIdentityPoolRoles: 'cognito-identity:SetIdentityPoolRoles',
      tagResource: 'cognito-identity:TagResource',
      unlinkDeveloperIdentity: 'cognito-identity:UnlinkDeveloperIdentity',
      unlinkIdentity: 'cognito-identity:UnlinkIdentity',
      untagResource: 'cognito-identity:UntagResource',
      updateIdentityPool: 'cognito-identity:UpdateIdentityPool'
    },
    cognitoSync: {
      bulkPublish: 'cognito-sync:BulkPublish',
      deleteDataset: 'cognito-sync:DeleteDataset',
      describeDataset: 'cognito-sync:DescribeDataset',
      describeIdentityPoolUsage: 'cognito-sync:DescribeIdentityPoolUsage',
      describeIdentityUsage: 'cognito-sync:DescribeIdentityUsage',
      getBulkPublishDetails: 'cognito-sync:GetBulkPublishDetails',
      getCognitoEvents: 'cognito-sync:GetCognitoEvents',
      getIdentityPoolConfiguration: 'cognito-sync:GetIdentityPoolConfiguration',
      listDatasets: 'cognito-sync:ListDatasets',
      listIdentityPoolUsage: 'cognito-sync:ListIdentityPoolUsage',
      listRecords: 'cognito-sync:ListRecords',
      queryRecords: 'cognito-sync:QueryRecords',
      registerDevice: 'cognito-sync:RegisterDevice',
      setCognitoEvents: 'cognito-sync:SetCognitoEvents',
      setDatasetConfiguration: 'cognito-sync:SetDatasetConfiguration',
      setIdentityPoolConfiguration: 'cognito-sync:SetIdentityPoolConfiguration',
      subscribeToDataset: 'cognito-sync:SubscribeToDataset',
      unsubscribeFromDataset: 'cognito-sync:UnsubscribeFromDataset',
      updateRecords: 'cognito-sync:UpdateRecords'
    },
    cognitoPools: {
      addCustomAttributes: 'cognito-idp:AddCustomAttributes',
      adminAddUserToGroup: 'cognito-idp:AdminAddUserToGroup',
      adminConfirmSignUp: 'cognito-idp:AdminConfirmSignUp',
      adminCreateUser: 'cognito-idp:AdminCreateUser',
      adminDeleteUser: 'cognito-idp:AdminDeleteUser',
      adminDeleteUserAttributes: 'cognito-idp:AdminDeleteUserAttributes',
      adminDisableProviderForUser: 'cognito-idp:AdminDisableProviderForUser',
      adminDisableUser: 'cognito-idp:AdminDisableUser',
      adminEnableUser: 'cognito-idp:AdminEnableUser',
      adminForgetDevice: 'cognito-idp:AdminForgetDevice',
      adminGetDevice: 'cognito-idp:AdminGetDevice',
      adminGetUser: 'cognito-idp:AdminGetUser',
      adminInitiateAuth: 'cognito-idp:AdminInitiateAuth',
      adminLinkProviderForUser: 'cognito-idp:AdminLinkProviderForUser',
      adminListDevices: 'cognito-idp:AdminListDevices',
      adminListGroupsForUser: 'cognito-idp:AdminListGroupsForUser',
      adminListUserAuthEvents: 'cognito-idp:AdminListUserAuthEvents',
      adminRemoveUserFromGroup: 'cognito-idp:AdminRemoveUserFromGroup',
      adminResetUserPassword: 'cognito-idp:AdminResetUserPassword',
      adminRespondToAuthChallenge: 'cognito-idp:AdminRespondToAuthChallenge',
      adminSetUserMFAPreference: 'cognito-idp:AdminSetUserMFAPreference',
      adminSetUserPassword: 'cognito-idp:AdminSetUserPassword',
      adminSetUserSettings: 'cognito-idp:AdminSetUserSettings',
      adminUpdateAuthEventFeedback: 'cognito-idp:AdminUpdateAuthEventFeedback',
      adminUpdateDeviceStatus: 'cognito-idp:AdminUpdateDeviceStatus',
      adminUpdateUserAttributes: 'cognito-idp:AdminUpdateUserAttributes',
      adminUserGlobalSignOut: 'cognito-idp:AdminUserGlobalSignOut',
      associateSoftwareToken: 'cognito-idp:AssociateSoftwareToken',
      changePassword: 'cognito-idp:ChangePassword',
      confirmDevice: 'cognito-idp:ConfirmDevice',
      confirmForgotPassword: 'cognito-idp:ConfirmForgotPassword',
      confirmSignUp: 'cognito-idp:ConfirmSignUp',
      createGroup: 'cognito-idp:CreateGroup',
      createIdentityProvider: 'cognito-idp:CreateIdentityProvider',
      createResourceServer: 'cognito-idp:CreateResourceServer',
      createUserImportJob: 'cognito-idp:CreateUserImportJob',
      createUserPool: 'cognito-idp:CreateUserPool',
      createUserPoolClient: 'cognito-idp:CreateUserPoolClient',
      createUserPoolDomain: 'cognito-idp:CreateUserPoolDomain',
      deleteGroup: 'cognito-idp:DeleteGroup',
      deleteIdentityProvider: 'cognito-idp:DeleteIdentityProvider',
      deleteResourceServer: 'cognito-idp:DeleteResourceServer',
      deleteUser: 'cognito-idp:DeleteUser',
      deleteUserAttributes: 'cognito-idp:DeleteUserAttributes',
      deleteUserPool: 'cognito-idp:DeleteUserPool',
      deleteUserPoolClient: 'cognito-idp:DeleteUserPoolClient',
      deleteUserPoolDomain: 'cognito-idp:DeleteUserPoolDomain',
      describeIdentityProvider: 'cognito-idp:DescribeIdentityProvider',
      describeResourceServer: 'cognito-idp:DescribeResourceServer',
      describeRiskConfiguration: 'cognito-idp:DescribeRiskConfiguration',
      describeUserImportJob: 'cognito-idp:DescribeUserImportJob',
      describeUserPool: 'cognito-idp:DescribeUserPool',
      describeUserPoolClient: 'cognito-idp:DescribeUserPoolClient',
      describeUserPoolDomain: 'cognito-idp:DescribeUserPoolDomain',
      forgetDevice: 'cognito-idp:ForgetDevice',
      forgotPassword: 'cognito-idp:ForgotPassword',
      getCSVHeader: 'cognito-idp:GetCSVHeader',
      gGetDevice: 'cognito-idp:GetDevice',
      getGroup: 'cognito-idp:GetGroup',
      getIdentityProviderByIdentifier: 'cognito-idp:GetIdentityProviderByIdentifier',
      getSigningCertificate: 'cognito-idp:GetSigningCertificate',
      getUICustomization: 'cognito-idp:GetUICustomization',
      getUser: 'cognito-idp:GetUser ',
      getUserAttributeVerificationCode: 'cognito-idp:GetUserAttributeVerificationCode',
      getUserPoolMfaConfig: 'cognito-idp:GetUserPoolMfaConfig',
      globalSignOut: 'cognito-idp:GlobalSignOut',
      initiateAuth: 'cognito-idp:InitiateAuth',
      listDevices: 'cognito-idp:ListDevices',
      listGroups: 'cognito-idp:ListGroups',
      listIdentityProviders: 'cognito-idp:ListIdentityProviders',
      listResourceServers: 'cognito-idp:ListResourceServers',
      listTagsForResource: 'cognito-idp:ListTagsForResource',
      listUserImportJobs: 'cognito-idp:ListUserImportJobs',
      listUserPoolClients: 'cognito-idp:ListUserPoolClients',
      listUserPools: 'cognito-idp:ListUserPools',
      listUsers: 'cognito-idp:ListUsers',
      listUsersInGroup: 'cognito-idp:ListUsersInGroup',
      resendConfirmationCode: 'cognito-idp:ResendConfirmationCode',
      respondToAuthChallenge: 'cognito-idp:RespondToAuthChallenge',
      setRiskConfiguration: 'cognito-idp:SetRiskConfiguration',
      setUICustomization: 'cognito-idp:SetUICustomization',
      setUserMFAPreference: 'cognito-idp:SetUserMFAPreference',
      setUserPoolMfaConfig: 'cognito-idp:SetUserPoolMfaConfig',
      setUserSettings: 'cognito-idp:SetUserSettings',
      signUp: 'cognito-idp:SignUp',
      startUserImportJob: 'cognito-idp:StartUserImportJob',
      stopUserImportJob: 'cognito-idp:StopUserImportJob',
      tagResource: 'cognito-idp:TagResource',
      untagResource: 'cognito-idp:UntagResource',
      updateAuthEventFeedback: 'cognito-idp:UpdateAuthEventFeedback',
      updateDeviceStatus: 'cognito-idp:UpdateDeviceStatus',
      updateGroup: 'cognito-idp:UpdateGroup',
      updateIdentityProvider: 'cognito-idp:UpdateIdentityProvider',
      updateResourceServer: 'cognito-idp:UpdateResourceServer',
      updateUserAttributes: 'cognito-idp:UpdateUserAttributes',
      updateUserPool: 'cognito-idp:UpdateUserPool',
      updateUserPoolClient: 'cognito-idp:UpdateUserPoolClient',
      updateUserPoolDomain: 'cognito-idp:UpdateUserPoolDomain',
      verifySoftwareToken: 'cognito-idp:VerifySoftwareToken',
      verifyUserAttribute: 'cognito-idp:VerifyUserAttribute'
    },
    costReport: {
      describeReportDefinitions: 'cur:DescribeReportDefinitions',
      deleteReportDefinition: 'cur:DeleteReportDefinition',
      putReportDefinition: 'cur:PutReportDefinition'
    },
    costExplorer: {
      getCostAndUsage: 'ce:GetCostAndUsage',
      gtCostForecast: 'ce:GetCostForecast',
      getDimensionValues: 'ce:GetDimensionValues',
      getReservationCoverage: 'ce:GetReservationCoverage',
      getReservationPurchaseRecommendation: 'ce:GetReservationPurchaseRecommendation',
      getReservationUtilization: 'ce:GetReservationUtilization',
      getTags: 'ce:GetTags'
    },
    dynamodb: {
      batchGetItem: 'dynamodb:BatchGetItem',
      batchWriteItem: 'dynamodb:BatchWriteItem',
      conditionCheckItem: 'dynamodb:ConditionCheckItem',
      createBackup: 'dynamodb:CreateBackup',
      createGlobalTable: 'dynamodb:CreateGlobalTable',
      createTable: 'dynamodb:CreateTable',
      deleteBackup: 'dynamodb:DeleteBackup',
      deleteItem: 'dynamodb:DeleteItem',
      deleteTable: 'dynamodb:DeleteTable',
      describeBackup: 'dynamodb:DescribeBackup',
      describeContinuousBackups: 'dynamodb:DescribeContinuousBackups',
      describeGlobalTable: 'dynamodb:DescribeGlobalTable',
      describeGlobalTableSettings: 'dynamodb:DescribeGlobalTableSettings',
      describeLimits: 'dynamodb:DescribeLimits',
      describeReservedCapacity: 'dynamodb:DescribeReservedCapacity',
      describeReservedCapacityOfferings: 'dynamodb:DescribeReservedCapacityOfferings',
      describeStream: 'dynamodb:DescribeStream',
      describeTable: 'dynamodb:DescribeTable',
      describeTimeToLive: 'dynamodb:DescribeTimeToLive',
      getItem: 'dynamodb:GetItem',
      getRecords: 'dynamodb:GetRecords',
      getShardIterator: 'dynamodb:GetShardIterator',
      listBackups: 'dynamodb:ListBackups',
      listGlobalTables: 'dynamodb:ListGlobalTables',
      listStreams: 'dynamodb:ListStreams',
      listTables: 'dynamodb:ListTables',
      listTagsOfResource: 'dynamodb:ListTagsOfResource',
      purchaseReservedCapacityOfferings: 'dynamodb:PurchaseReservedCapacityOfferings',
      putItem: 'dynamodb:PutItem',
      query: 'dynamodb:Query',
      restoreTableFromBackup: 'dynamodb:RestoreTableFromBackup',
      restoreTableToPointInTime: 'dynamodb:RestoreTableToPointInTime',
      scan: 'dynamodb:Scan',
      tagResource: 'dynamodb:TagResource',
      untagResource: 'dynamodb:UntagResource',
      updateContinuousBackups: 'dynamodb:UpdateContinuousBackups',
      updateGlobalTable: 'dynamodb:UpdateGlobalTable',
      updateGlobalTableSettings: 'dynamodb:UpdateGlobalTableSettings',
      updateItem: 'dynamodb:UpdateItem',
      updateTable: 'dynamodb:UpdateTable',
      updateTimeToLive: 'dynamodb:UpdateTimeToLive'
    },
    dynamodbDAX: {
      batchGetItem: 'dax:BatchGetItem',
      batchWriteItem: 'dax:BatchWriteItem',
      conditionCheckItem: 'dax:ConditionCheckItem',
      createCluster: 'dax:CreateCluster',
      createParameterGroup: 'dax:CreateParameterGroup',
      createSubnetGroup: 'dax:CreateSubnetGroup',
      decreaseReplicationFactor: 'dax:DecreaseReplicationFactor',
      deleteCluster: 'dax:DeleteCluster',
      deleteItem: 'dax:DeleteItem',
      deleteParameterGroup: 'dax:DeleteParameterGroup',
      deleteSubnetGroup: 'dax:DeleteSubnetGroup',
      describeClusters: 'dax:DescribeClusters',
      describeDefaultParameters: 'dax:DescribeDefaultParameters',
      describeEvents: 'dax:DescribeEvents',
      describeParameterGroups: 'dax:DescribeParameterGroups',
      describeParameters: 'dax:DescribeParameters',
      describeSubnetGroups: 'dax:DescribeSubnetGroups',
      getItem: 'dax:GetItem',
      increaseReplicationFactor: 'dax:IncreaseReplicationFactor',
      listTags: 'dax:ListTags',
      putItem: 'dax:PutItem',
      query: 'dax:Query',
      rebootNode: 'dax:RebootNode',
      scan: 'dax:Scan',
      tagResource: 'dax:TagResource',
      untagResource: 'dax:UntagResource',
      updateCluster: 'dax:UpdateCluster',
      updateItem: 'dax:UpdateItem',
      updateParameterGroup: 'dax:UpdateParameterGroup',
      updateSubnetGroup: 'dax:UpdateSubnetGroup'
    },
    eb: {
      abortEnvironmentUpdate: 'elasticbeanstalk:AbortEnvironmentUpdate',
      addTags: 'elasticbeanstalk:AddTags',
      applyEnvironmentManagedAction: 'elasticbeanstalk:ApplyEnvironmentManagedAction',
      checkDNSAvailability: 'elasticbeanstalk:CheckDNSAvailability',
      composeEnvironments: 'elasticbeanstalk:ComposeEnvironments',
      createApplication: 'elasticbeanstalk:CreateApplication',
      createApplicationVersion: 'elasticbeanstalk:CreateApplicationVersion',
      createConfigurationTemplate: 'elasticbeanstalk:CreateConfigurationTemplate',
      createEnvironment: 'elasticbeanstalk:CreateEnvironment',
      createPlatformVersion: 'elasticbeanstalk:CreatePlatformVersion',
      createStorageLocation: 'elasticbeanstalk:CreateStorageLocation',
      deleteApplication: 'elasticbeanstalk:DeleteApplication',
      deleteApplicationVersion: 'elasticbeanstalk:DeleteApplicationVersion',
      deleteConfigurationTemplate: 'elasticbeanstalk:DeleteConfigurationTemplate',
      deleteEnvironmentConfiguration: 'elasticbeanstalk:DeleteEnvironmentConfiguration',
      deletePlatformVersion: 'elasticbeanstalk:DeletePlatformVersion',
      describeAccountAttributes: 'elasticbeanstalk:DescribeAccountAttributes',
      describeApplicationVersions: 'elasticbeanstalk:DescribeApplicationVersions',
      describeApplications: 'elasticbeanstalk:DescribeApplications',
      describeConfigurationOptions: 'elasticbeanstalk:DescribeConfigurationOptions',
      describeConfigurationSettings: 'elasticbeanstalk:DescribeConfigurationSettings',
      describeEnvironmentHealth: 'elasticbeanstalk:DescribeEnvironmentHealth',
      describeEnvironmentManagedActionHistory:
        'elasticbeanstalk:DescribeEnvironmentManagedActionHistory',
      describeEnvironmentManagedActions: 'elasticbeanstalk:DescribeEnvironmentManagedActions',
      describeEnvironmentResources: 'elasticbeanstalk:DescribeEnvironmentResources',
      describeEnvironments: 'elasticbeanstalk:DescribeEnvironments',
      describeEvents: 'elasticbeanstalk:DescribeEvents',
      describeInstancesHealth: 'elasticbeanstalk:DescribeInstancesHealth',
      describePlatformVersion: 'elasticbeanstalk:DescribePlatformVersion',
      listAvailableSolutionStacks: 'elasticbeanstalk:ListAvailableSolutionStacks',
      listPlatformVersions: 'elasticbeanstalk:ListPlatformVersions',
      listTagsForResource: 'elasticbeanstalk:ListTagsForResource',
      rebuildEnvironment: 'elasticbeanstalk:RebuildEnvironment',
      removeTags: 'elasticbeanstalk:RemoveTags',
      requestEnvironmentInfo: 'elasticbeanstalk:RequestEnvironmentInfo',
      restartAppServer: 'elasticbeanstalk:RestartAppServer',
      retrieveEnvironmentInfo: 'elasticbeanstalk:RetrieveEnvironmentInfo',
      swapEnvironmentCNAMEs: 'elasticbeanstalk:SwapEnvironmentCNAMEs',
      terminateEnvironment: 'elasticbeanstalk:TerminateEnvironment',
      updateApplication: 'elasticbeanstalk:UpdateApplication',
      updateApplicationResourceLifecycle: 'elasticbeanstalk:UpdateApplicationResourceLifecycle',
      updateApplicationVersion: 'elasticbeanstalk:UpdateApplicationVersion',
      updateConfigurationTemplate: 'elasticbeanstalk:UpdateConfigurationTemplate',
      updateEnvironment: 'elasticbeanstalk:UpdateEnvironment',
      validateConfigurationSettings: 'elasticbeanstalk:ValidateConfigurationSettings'
    },
    ec2: {
      acceptReservedInstancesExchangeQuote: 'ec2:AcceptReservedInstancesExchangeQuote',
      acceptTransitGatewayVpcAttachment: 'ec2:AcceptTransitGatewayVpcAttachment',
      acceptVpcEndpointConnections: 'ec2:AcceptVpcEndpointConnections',
      acceptVpcPeeringConnection: 'ec2:AcceptVpcPeeringConnection',
      advertiseByoipCidr: 'ec2:AdvertiseByoipCidr',
      allocateAddress: 'ec2:AllocateAddress',
      allocateHosts: 'ec2:AllocateHosts',
      applySecurityGroupsToClientVpnTargetNetwork:
        'ec2:ApplySecurityGroupsToClientVpnTargetNetwork',
      assignIpv6Addresses: 'ec2:AssignIpv6Addresses',
      assignPrivateIpAddresses: 'ec2:AssignPrivateIpAddresses',
      associateAddress: 'ec2:AssociateAddress',
      associateClientVpnTargetNetwork: 'ec2:AssociateClientVpnTargetNetwork',
      associateDhcpOptions: 'ec2:AssociateDhcpOptions',
      associateIamInstanceProfile: 'ec2:AssociateIamInstanceProfile',
      associateRouteTable: 'ec2:AssociateRouteTable',
      associateSubnetCidrBlock: 'ec2:AssociateSubnetCidrBlock',
      associateTransitGatewayRouteTable: 'ec2:AssociateTransitGatewayRouteTable',
      associateVpcCidrBlock: 'ec2:AssociateVpcCidrBlock',
      attachClassicLinkVpc: 'ec2:AttachClassicLinkVpc',
      attachInternetGateway: 'ec2:AttachInternetGateway',
      attachNetworkInterface: 'ec2:AttachNetworkInterface',
      attachVolume: 'ec2:AttachVolume',
      attachVpnGateway: 'ec2:AttachVpnGateway',
      authorizeClientVpnIngress: 'ec2:AuthorizeClientVpnIngress',
      authorizeSecurityGroupEgress: 'ec2:AuthorizeSecurityGroupEgress',
      authorizeSecurityGroupIngress: 'ec2:AuthorizeSecurityGroupIngress',
      bundleInstance: 'ec2:BundleInstance',
      cancelBundleTask: 'ec2:CancelBundleTask',
      cancelCapacityReservation: 'ec2:CancelCapacityReservation',
      cancelConversionTask: 'ec2:CancelConversionTask',
      cancelExportTask: 'ec2:CancelExportTask',
      cancelImportTask: 'ec2:CancelImportTask',
      cancelReservedInstancesListing: 'ec2:CancelReservedInstancesListing',
      cancelSpotFleetRequests: 'ec2:CancelSpotFleetRequests',
      cancelSpotInstanceRequests: 'ec2:CancelSpotInstanceRequests',
      confirmProductInstance: 'ec2:ConfirmProductInstance',
      copyFpgaImage: 'ec2:CopyFpgaImage',
      copyImage: 'ec2:CopyImage',
      copySnapshot: 'ec2:CopySnapshot',
      createCapacityReservation: 'ec2:CreateCapacityReservation',
      createClientVpnEndpoint: 'ec2:CreateClientVpnEndpoint',
      createClientVpnRoute: 'ec2:CreateClientVpnRoute',
      createCustomerGateway: 'ec2:CreateCustomerGateway',
      createDefaultSubnet: 'ec2:CreateDefaultSubnet',
      createDefaultVpc: 'ec2:CreateDefaultVpc',
      createDhcpOptions: 'ec2:CreateDhcpOptions',
      createEgressOnlyInternetGateway: 'ec2:CreateEgressOnlyInternetGateway',
      createFleet: 'ec2:CreateFleet',
      createFlowLogs: 'ec2:CreateFlowLogs',
      createFpgaImage: 'ec2:CreateFpgaImage',
      createImage: 'ec2:CreateImage',
      createInstanceExportTask: 'ec2:CreateInstanceExportTask',
      createInternetGateway: 'ec2:CreateInternetGateway',
      createKeyPair: 'ec2:CreateKeyPair',
      createLaunchTemplate: 'ec2:CreateLaunchTemplate',
      createLaunchTemplateVersion: 'ec2:CreateLaunchTemplateVersion',
      createNatGateway: 'ec2:CreateNatGateway',
      createNetworkAcl: 'ec2:CreateNetworkAcl',
      createNetworkAclEntry: 'ec2:CreateNetworkAclEntry',
      createNetworkInterface: 'ec2:CreateNetworkInterface',
      createNetworkInterfacePermission: 'ec2:CreateNetworkInterfacePermission',
      createPlacementGroup: 'ec2:CreatePlacementGroup',
      createReservedInstancesListing: 'ec2:CreateReservedInstancesListing',
      createRoute: 'ec2:CreateRoute',
      createRouteTable: 'ec2:CreateRouteTable',
      createSecurityGroup: 'ec2:CreateSecurityGroup',
      createSnapshot: 'ec2:CreateSnapshot',
      createSnapshots: 'ec2:CreateSnapshots',
      createSpotDatafeedSubscription: 'ec2:CreateSpotDatafeedSubscription',
      createSubnet: 'ec2:CreateSubnet',
      createTags: 'ec2:CreateTags',
      createTransitGateway: 'ec2:CreateTransitGateway',
      createTransitGatewayRoute: 'ec2:CreateTransitGatewayRoute',
      createTransitGatewayRouteTable: 'ec2:CreateTransitGatewayRouteTable',
      createTransitGatewayVpcAttachment: 'ec2:CreateTransitGatewayVpcAttachment',
      createVolume: 'ec2:CreateVolume',
      createVpc: 'ec2:CreateVpc',
      createVpcEndpoint: 'ec2:CreateVpcEndpoint',
      createVpcEndpointConnectionNotification: 'ec2:CreateVpcEndpointConnectionNotification',
      createVpcEndpointServiceConfiguration: 'ec2:CreateVpcEndpointServiceConfiguration',
      createVpcPeeringConnection: 'ec2:CreateVpcPeeringConnection',
      createVpnConnection: 'ec2:CreateVpnConnection',
      createVpnConnectionRoute: 'ec2:CreateVpnConnectionRoute',
      createVpnGateway: 'ec2:CreateVpnGateway',
      deleteClientVpnEndpoint: 'ec2:DeleteClientVpnEndpoint',
      deleteClientVpnRoute: 'ec2:DeleteClientVpnRoute',
      deleteCustomerGateway: 'ec2:DeleteCustomerGateway',
      deleteDhcpOptions: 'ec2:DeleteDhcpOptions',
      deleteEgressOnlyInternetGateway: 'ec2:DeleteEgressOnlyInternetGateway',
      deleteFleets: 'ec2:DeleteFleets',
      deleteFlowLogs: 'ec2:DeleteFlowLogs',
      deleteFpgaImage: 'ec2:DeleteFpgaImage',
      deleteInternetGateway: 'ec2:DeleteInternetGateway',
      deleteKeyPair: 'ec2:DeleteKeyPair',
      deleteLaunchTemplate: 'ec2:DeleteLaunchTemplate',
      deleteLaunchTemplateVersions: 'ec2:DeleteLaunchTemplateVersions',
      deleteNatGateway: 'ec2:DeleteNatGateway',
      deleteNetworkAcl: 'ec2:DeleteNetworkAcl',
      deleteNetworkAclEntry: 'ec2:DeleteNetworkAclEntry',
      deleteNetworkInterface: 'ec2:DeleteNetworkInterface',
      deleteNetworkInterfacePermission: 'ec2:DeleteNetworkInterfacePermission',
      deletePlacementGroup: 'ec2:DeletePlacementGroup',
      deleteRoute: 'ec2:DeleteRoute',
      deleteRouteTable: 'ec2:DeleteRouteTable',
      deleteSecurityGroup: 'ec2:DeleteSecurityGroup',
      deleteSnapshot: 'ec2:DeleteSnapshot',
      deleteSpotDatafeedSubscription: 'ec2:DeleteSpotDatafeedSubscription',
      deleteSubnet: 'ec2:DeleteSubnet',
      deleteTags: 'ec2:DeleteTags',
      deleteTransitGateway: 'ec2:DeleteTransitGateway',
      deleteTransitGatewayRoute: 'ec2:DeleteTransitGatewayRoute',
      deleteTransitGatewayRouteTable: 'ec2:DeleteTransitGatewayRouteTable',
      deleteTransitGatewayVpcAttachment: 'ec2:DeleteTransitGatewayVpcAttachment',
      deleteVolume: 'ec2:DeleteVolume',
      deleteVpc: 'ec2:DeleteVpc',
      deleteVpcEndpointConnectionNotifications: 'ec2:DeleteVpcEndpointConnectionNotifications',
      deleteVpcEndpointServiceConfigurations: 'ec2:DeleteVpcEndpointServiceConfigurations',
      deleteVpcEndpoints: 'ec2:DeleteVpcEndpoints',
      deleteVpcPeeringConnection: 'ec2:DeleteVpcPeeringConnection',
      deleteVpnConnection: 'ec2:DeleteVpnConnection',
      deleteVpnConnectionRoute: 'ec2:DeleteVpnConnectionRoute',
      deleteVpnGateway: 'ec2:DeleteVpnGateway',
      deprovisionByoipCidr: 'ec2:DeprovisionByoipCidr',
      deregisterImage: 'ec2:DeregisterImage',
      describeAccountAttributes: 'ec2:DescribeAccountAttributes',
      describeAddresses: 'ec2:DescribeAddresses',
      describeAggregateIdFormat: 'ec2:DescribeAggregateIdFormat',
      describeAvailabilityZones: 'ec2:DescribeAvailabilityZones',
      describeBundleTasks: 'ec2:DescribeBundleTasks',
      describeByoipCidrs: 'ec2:DescribeByoipCidrs',
      describeCapacityReservations: 'ec2:DescribeCapacityReservations',
      describeClassicLinkInstances: 'ec2:DescribeClassicLinkInstances',
      describeClientVpnAuthorizationRules: 'ec2:DescribeClientVpnAuthorizationRules',
      describeClientVpnConnections: 'ec2:DescribeClientVpnConnections',
      describeClientVpnEndpoints: 'ec2:DescribeClientVpnEndpoints',
      describeClientVpnRoutes: 'ec2:DescribeClientVpnRoutes',
      describeClientVpnTargetNetworks: 'ec2:DescribeClientVpnTargetNetworks',
      describeConversionTasks: 'ec2:DescribeConversionTasks',
      describeCustomerGateways: 'ec2:DescribeCustomerGateways',
      describeDhcpOptions: 'ec2:DescribeDhcpOptions',
      describeEgressOnlyInternetGateways: 'ec2:DescribeEgressOnlyInternetGateways',
      describeElasticGpus: 'ec2:DescribeElasticGpus',
      describeExportTasks: 'ec2:DescribeExportTasks',
      describeFleetHistory: 'ec2:DescribeFleetHistory',
      describeFleetInstances: 'ec2:DescribeFleetInstances',
      describeFleets: 'ec2:DescribeFleets',
      describeFlowLogs: 'ec2:DescribeFlowLogs',
      describeFpgaImageAttribute: 'ec2:DescribeFpgaImageAttribute',
      describeFpgaImages: 'ec2:DescribeFpgaImages',
      describeHostReservationOfferings: 'ec2:DescribeHostReservationOfferings',
      describeHostReservations: 'ec2:DescribeHostReservations',
      describeHosts: 'ec2:DescribeHosts',
      describeIamInstanceProfileAssociations: 'ec2:DescribeIamInstanceProfileAssociations',
      describeIdFormat: 'ec2:DescribeIdFormat',
      describeIdentityIdFormat: 'ec2:DescribeIdentityIdFormat',
      describeImageAttribute: 'ec2:DescribeImageAttribute',
      describeImages: 'ec2:DescribeImages',
      describeImportImageTasks: 'ec2:DescribeImportImageTasks',
      describeImportSnapshotTasks: 'ec2:DescribeImportSnapshotTasks',
      describeInstanceAttribute: 'ec2:DescribeInstanceAttribute',
      describeInstanceCreditSpecifications: 'ec2:DescribeInstanceCreditSpecifications',
      describeInstanceStatus: 'ec2:DescribeInstanceStatus',
      describeInstances: 'ec2:DescribeInstances',
      describeInternetGateways: 'ec2:DescribeInternetGateways',
      describeKeyPairs: 'ec2:DescribeKeyPairs',
      describeLaunchTemplateVersions: 'ec2:DescribeLaunchTemplateVersions',
      describeLaunchTemplates: 'ec2:DescribeLaunchTemplates',
      describeMovingAddresses: 'ec2:DescribeMovingAddresses',
      describeNatGateways: 'ec2:DescribeNatGateways',
      describeNetworkAcls: 'ec2:DescribeNetworkAcls',
      describeNetworkInterfaceAttribute: 'ec2:DescribeNetworkInterfaceAttribute',
      describeNetworkInterfacePermissions: 'ec2:DescribeNetworkInterfacePermissions',
      describeNetworkInterfaces: 'ec2:DescribeNetworkInterfaces',
      describePlacementGroups: 'ec2:DescribePlacementGroups',
      describePrefixLists: 'ec2:DescribePrefixLists',
      describePrincipalIdFormat: 'ec2:DescribePrincipalIdFormat',
      describePublicIpv4Pools: 'ec2:DescribePublicIpv4Pools',
      describeRegions: 'ec2:DescribeRegions',
      describeReservedInstances: 'ec2:DescribeReservedInstances',
      describeReservedInstancesListings: 'ec2:DescribeReservedInstancesListings',
      describeReservedInstancesModifications: 'ec2:DescribeReservedInstancesModifications',
      describeReservedInstancesOfferings: 'ec2:DescribeReservedInstancesOfferings',
      describeRouteTables: 'ec2:DescribeRouteTables',
      describeScheduledInstanceAvailability: 'ec2:DescribeScheduledInstanceAvailability',
      describeScheduledInstances: 'ec2:DescribeScheduledInstances',
      describeSecurityGroupReferences: 'ec2:DescribeSecurityGroupReferences',
      describeSecurityGroups: 'ec2:DescribeSecurityGroups',
      describeSnapshotAttribute: 'ec2:DescribeSnapshotAttribute',
      describeSnapshots: 'ec2:DescribeSnapshots',
      describeSpotDatafeedSubscription: 'ec2:DescribeSpotDatafeedSubscription',
      describeSpotFleetInstances: 'ec2:DescribeSpotFleetInstances',
      describeSpotFleetRequestHistory: 'ec2:DescribeSpotFleetRequestHistory',
      describeSpotFleetRequests: 'ec2:DescribeSpotFleetRequests',
      describeSpotInstanceRequests: 'ec2:DescribeSpotInstanceRequests',
      describeSpotPriceHistory: 'ec2:DescribeSpotPriceHistory',
      describeStaleSecurityGroups: 'ec2:DescribeStaleSecurityGroups',
      describeSubnets: 'ec2:DescribeSubnets',
      describeTags: 'ec2:DescribeTags',
      describeTransitGatewayAttachments: 'ec2:DescribeTransitGatewayAttachments',
      describeTransitGatewayRouteTables: 'ec2:DescribeTransitGatewayRouteTables',
      describeTransitGatewayVpcAttachments: 'ec2:DescribeTransitGatewayVpcAttachments',
      describeTransitGateways: 'ec2:DescribeTransitGateways',
      describeVolumeAttribute: 'ec2:DescribeVolumeAttribute',
      describeVolumeStatus: 'ec2:DescribeVolumeStatus',
      describeVolumes: 'ec2:DescribeVolumes',
      describeVolumesModifications: 'ec2:DescribeVolumesModifications',
      describeVpcAttribute: 'ec2:DescribeVpcAttribute',
      describeVpcClassicLink: 'ec2:DescribeVpcClassicLink',
      describeVpcClassicLinkDnsSupport: 'ec2:DescribeVpcClassicLinkDnsSupport',
      describeVpcEndpointConnectionNotifications: 'ec2:DescribeVpcEndpointConnectionNotifications',
      describeVpcEndpointConnections: 'ec2:DescribeVpcEndpointConnections',
      describeVpcEndpointServiceConfigurations: 'ec2:DescribeVpcEndpointServiceConfigurations',
      describeVpcEndpointServicePermissions: 'ec2:DescribeVpcEndpointServicePermissions',
      describeVpcEndpointServices: 'ec2:DescribeVpcEndpointServices',
      describeVpcEndpoints: 'ec2:DescribeVpcEndpoints',
      describeVpcPeeringConnections: 'ec2:DescribeVpcPeeringConnections',
      describeVpcs: 'ec2:DescribeVpcs',
      describeVpnConnections: 'ec2:DescribeVpnConnections',
      describeVpnGateways: 'ec2:DescribeVpnGateways',
      detachClassicLinkVpc: 'ec2:DetachClassicLinkVpc',
      detachInternetGateway: 'ec2:DetachInternetGateway',
      detachNetworkInterface: 'ec2:DetachNetworkInterface',
      detachVolume: 'ec2:DetachVolume',
      detachVpnGateway: 'ec2:DetachVpnGateway',
      disableTransitGatewayRouteTablePropagation: 'ec2:DisableTransitGatewayRouteTablePropagation',
      disableVgwRoutePropagation: 'ec2:DisableVgwRoutePropagation',
      disableVpcClassicLink: 'ec2:DisableVpcClassicLink',
      disableVpcClassicLinkDnsSupport: 'ec2:DisableVpcClassicLinkDnsSupport',
      disassociateAddress: 'ec2:DisassociateAddress',
      disassociateClientVpnTargetNetwork: 'ec2:DisassociateClientVpnTargetNetwork',
      disassociateIamInstanceProfile: 'ec2:DisassociateIamInstanceProfile',
      disassociateRouteTable: 'ec2:DisassociateRouteTable',
      disassociateSubnetCidrBlock: 'ec2:DisassociateSubnetCidrBlock',
      disassociateTransitGatewayRouteTable: 'ec2:DisassociateTransitGatewayRouteTable',
      disassociateVpcCidrBlock: 'ec2:DisassociateVpcCidrBlock',
      enableTransitGatewayRouteTablePropagation: 'ec2:EnableTransitGatewayRouteTablePropagation',
      enableVgwRoutePropagation: 'ec2:EnableVgwRoutePropagation',
      enableVolumeIO: 'ec2:EnableVolumeIO',
      enableVpcClassicLink: 'ec2:EnableVpcClassicLink',
      enableVpcClassicLinkDnsSupport: 'ec2:EnableVpcClassicLinkDnsSupport',
      exportClientVpnClientCertificateRevocationList:
        'ec2:ExportClientVpnClientCertificateRevocationList',
      exportClientVpnClientConfiguration: 'ec2:ExportClientVpnClientConfiguration',
      exportTransitGatewayRoutes: 'ec2:ExportTransitGatewayRoutes',
      getConsoleOutput: 'ec2:GetConsoleOutput',
      getConsoleScreenshot: 'ec2:GetConsoleScreenshot',
      getHostReservationPurchasePreview: 'ec2:GetHostReservationPurchasePreview',
      getLaunchTemplateData: 'ec2:GetLaunchTemplateData',
      getPasswordData: 'ec2:GetPasswordData',
      getReservedInstancesExchangeQuote: 'ec2:GetReservedInstancesExchangeQuote',
      getTransitGatewayAttachmentPropagations: 'ec2:GetTransitGatewayAttachmentPropagations',
      getTransitGatewayRouteTableAssociations: 'ec2:GetTransitGatewayRouteTableAssociations',
      getTransitGatewayRouteTablePropagations: 'ec2:GetTransitGatewayRouteTablePropagations',
      importClientVpnClientCertificateRevocationList:
        'ec2:ImportClientVpnClientCertificateRevocationList',
      importImage: 'ec2:ImportImage',
      importInstance: 'ec2:ImportInstance',
      importKeyPair: 'ec2:ImportKeyPair',
      importSnapshot: 'ec2:ImportSnapshot',
      importVolume: 'ec2:ImportVolume',
      modifyCapacityReservation: 'ec2:ModifyCapacityReservation',
      modifyClientVpnEndpoint: 'ec2:ModifyClientVpnEndpoint',
      modifyFleet: 'ec2:ModifyFleet',
      modifyFpgaImageAttribute: 'ec2:ModifyFpgaImageAttribute',
      modifyHosts: 'ec2:ModifyHosts',
      modifyIdFormat: 'ec2:ModifyIdFormat',
      modifyIdentityIdFormat: 'ec2:ModifyIdentityIdFormat',
      modifyImageAttribute: 'ec2:ModifyImageAttribute',
      modifyInstanceAttribute: 'ec2:ModifyInstanceAttribute',
      modifyInstanceCapacityReservationAttributes:
        'ec2:ModifyInstanceCapacityReservationAttributes',
      modifyInstanceCreditSpecification: 'ec2:ModifyInstanceCreditSpecification',
      modifyInstanceEventStartTime: 'ec2:ModifyInstanceEventStartTime',
      modifyInstancePlacement: 'ec2:ModifyInstancePlacement',
      modifyLaunchTemplate: 'ec2:ModifyLaunchTemplate',
      modifyNetworkInterfaceAttribute: 'ec2:ModifyNetworkInterfaceAttribute',
      modifyReservedInstances: 'ec2:ModifyReservedInstances',
      modifySnapshotAttribute: 'ec2:ModifySnapshotAttribute',
      modifySpotFleetRequest: 'ec2:ModifySpotFleetRequest',
      modifySubnetAttribute: 'ec2:ModifySubnetAttribute',
      modifyTransitGatewayVpcAttachment: 'ec2:ModifyTransitGatewayVpcAttachment',
      modifyVolume: 'ec2:ModifyVolume',
      modifyVolumeAttribute: 'ec2:ModifyVolumeAttribute',
      modifyVpcAttribute: 'ec2:ModifyVpcAttribute',
      modifyVpcEndpoint: 'ec2:ModifyVpcEndpoint',
      modifyVpcEndpointConnectionNotification: 'ec2:ModifyVpcEndpointConnectionNotification',
      modifyVpcEndpointServiceConfiguration: 'ec2:ModifyVpcEndpointServiceConfiguration',
      modifyVpcEndpointServicePermissions: 'ec2:ModifyVpcEndpointServicePermissions',
      modifyVpcPeeringConnectionOptions: 'ec2:ModifyVpcPeeringConnectionOptions',
      modifyVpcTenancy: 'ec2:ModifyVpcTenancy',
      monitorInstances: 'ec2:MonitorInstances',
      moveAddressToVpc: 'ec2:MoveAddressToVpc',
      provisionByoipCidr: 'ec2:ProvisionByoipCidr',
      purchaseHostReservation: 'ec2:PurchaseHostReservation',
      purchaseReservedInstancesOffering: 'ec2:PurchaseReservedInstancesOffering',
      purchaseScheduledInstances: 'ec2:PurchaseScheduledInstances',
      rebootInstances: 'ec2:RebootInstances',
      registerImage: 'ec2:RegisterImage',
      rejectTransitGatewayVpcAttachment: 'ec2:RejectTransitGatewayVpcAttachment',
      rejectVpcEndpointConnections: 'ec2:RejectVpcEndpointConnections',
      rejectVpcPeeringConnection: 'ec2:RejectVpcPeeringConnection',
      releaseAddress: 'ec2:ReleaseAddress',
      releaseHosts: 'ec2:ReleaseHosts',
      replaceIamInstanceProfileAssociation: 'ec2:ReplaceIamInstanceProfileAssociation',
      replaceNetworkAclAssociation: 'ec2:ReplaceNetworkAclAssociation',
      replaceNetworkAclEntry: 'ec2:ReplaceNetworkAclEntry',
      replaceRoute: 'ec2:ReplaceRoute',
      replaceRouteTableAssociation: 'ec2:ReplaceRouteTableAssociation',
      replaceTransitGatewayRoute: 'ec2:ReplaceTransitGatewayRoute',
      reportInstanceStatus: 'ec2:ReportInstanceStatus',
      requestSpotFleet: 'ec2:RequestSpotFleet',
      requestSpotInstances: 'ec2:RequestSpotInstances',
      resetFpgaImageAttribute: 'ec2:ResetFpgaImageAttribute',
      resetImageAttribute: 'ec2:ResetImageAttribute',
      resetInstanceAttribute: 'ec2:ResetInstanceAttribute',
      resetNetworkInterfaceAttribute: 'ec2:ResetNetworkInterfaceAttribute',
      resetSnapshotAttribute: 'ec2:ResetSnapshotAttribute',
      restoreAddressToClassic: 'ec2:RestoreAddressToClassic',
      revokeClientVpnIngress: 'ec2:RevokeClientVpnIngress',
      revokeSecurityGroupEgress: 'ec2:RevokeSecurityGroupEgress',
      revokeSecurityGroupIngress: 'ec2:RevokeSecurityGroupIngress',
      runInstances: 'ec2:RunInstances',
      runScheduledInstances: 'ec2:RunScheduledInstances',
      searchTransitGatewayRoutes: 'ec2:SearchTransitGatewayRoutes',
      startInstances: 'ec2:StartInstances',
      stopInstances: 'ec2:StopInstances',
      terminateClientVpnConnections: 'ec2:TerminateClientVpnConnections',
      terminateInstances: 'ec2:TerminateInstances',
      unassignIpv6Addresses: 'ec2:UnassignIpv6Addresses',
      unassignPrivateIpAddresses: 'ec2:UnassignPrivateIpAddresses',
      unmonitorInstances: 'ec2:UnmonitorInstances',
      updateSecurityGroupRuleDescriptionsEgress: 'ec2:UpdateSecurityGroupRuleDescriptionsEgress',
      updateSecurityGroupRuleDescriptionsIngress: 'ec2:UpdateSecurityGroupRuleDescriptionsIngress',
      withdrawByoipCidr: 'ec2:WithdrawByoipCidr'
    },
    ec2AutoScale: {
      attachInstances: 'autoscaling:AttachInstances',
      attachLoadBalancerTargetGroups: 'autoscaling:AttachLoadBalancerTargetGroups',
      attachLoadBalancers: 'autoscaling:AttachLoadBalancers',
      batchDeleteScheduledAction: 'autoscaling:BatchDeleteScheduledAction',
      batchPutScheduledUpdateGroupAction: 'autoscaling:BatchPutScheduledUpdateGroupAction',
      completeLifecycleAction: 'autoscaling:CompleteLifecycleAction',
      createAutoScalingGroup: 'autoscaling:CreateAutoScalingGroup',
      createLaunchConfiguration: 'autoscaling:CreateLaunchConfiguration',
      createOrUpdateTags: 'autoscaling:CreateOrUpdateTags',
      deleteAutoScalingGroup: 'autoscaling:DeleteAutoScalingGroup',
      deleteLaunchConfiguration: 'autoscaling:DeleteLaunchConfiguration',
      deleteLifecycleHook: 'autoscaling:DeleteLifecycleHook',
      deleteNotificationConfiguration: 'autoscaling:DeleteNotificationConfiguration',
      deletePolicy: 'autoscaling:DeletePolicy',
      deleteScheduledAction: 'autoscaling:DeleteScheduledAction',
      deleteTags: 'autoscaling:DeleteTags',
      describeAccountLimits: 'autoscaling:DescribeAccountLimits',
      describeAdjustmentTypes: 'autoscaling:DescribeAdjustmentTypes',
      describeAutoScalingGroups: 'autoscaling:DescribeAutoScalingGroups',
      describeAutoScalingInstances: 'autoscaling:DescribeAutoScalingInstances',
      describeAutoScalingNotificationTypes: 'autoscaling:DescribeAutoScalingNotificationTypes',
      describeLaunchConfigurations: 'autoscaling:DescribeLaunchConfigurations',
      describeLifecycleHookTypes: 'autoscaling:DescribeLifecycleHookTypes',
      describeLifecycleHooks: 'autoscaling:DescribeLifecycleHooks',
      describeLoadBalancerTargetGroups: 'autoscaling:DescribeLoadBalancerTargetGroups',
      describeLoadBalancers: 'autoscaling:DescribeLoadBalancers',
      describeMetricCollectionTypes: 'autoscaling:DescribeMetricCollectionTypes',
      describeNotificationConfigurations: 'autoscaling:DescribeNotificationConfigurations',
      describePolicies: 'autoscaling:DescribePolicies',
      describeScalingActivities: 'autoscaling:DescribeScalingActivities',
      describeScalingProcessTypes: 'autoscaling:DescribeScalingProcessTypes',
      describeScheduledActions: 'autoscaling:DescribeScheduledActions',
      describeTags: 'autoscaling:DescribeTags',
      describeTerminationPolicyTypes: 'autoscaling:DescribeTerminationPolicyTypes',
      detachInstances: 'autoscaling:DetachInstances',
      detachLoadBalancerTargetGroups: 'autoscaling:DetachLoadBalancerTargetGroups',
      detachLoadBalancers: 'autoscaling:DetachLoadBalancers',
      disableMetricsCollection: 'autoscaling:DisableMetricsCollection',
      enableMetricsCollection: 'autoscaling:EnableMetricsCollection',
      enterStandby: 'autoscaling:EnterStandby',
      executePolicy: 'autoscaling:ExecutePolicy',
      exitStandby: 'autoscaling:ExitStandby',
      putLifecycleHook: 'autoscaling:PutLifecycleHook',
      putNotificationConfiguration: 'autoscaling:PutNotificationConfiguration',
      putScalingPolicy: 'autoscaling:PutScalingPolicy',
      putScheduledUpdateGroupAction: 'autoscaling:PutScheduledUpdateGroupAction',
      recordLifecycleActionHeartbeat: 'autoscaling:RecordLifecycleActionHeartbeat',
      resumeProcesses: 'autoscaling:ResumeProcesses',
      setDesiredCapacity: 'autoscaling:SetDesiredCapacity',
      setInstanceHealth: 'autoscaling:SetInstanceHealth',
      setInstanceProtection: 'autoscaling:SetInstanceProtection',
      suspendProcesses: 'autoscaling:SuspendProcesses',
      terminateInstanceInAutoScalingGroup: 'autoscaling:TerminateInstanceInAutoScalingGroup',
      updateAutoScalingGroup: 'autoscaling:UpdateAutoScalingGroup'
    },
    ecr: {
      batchCheckLayerAvailability: 'ecr:BatchCheckLayerAvailability',
      batchDeleteImage: 'ecr:BatchDeleteImage',
      batchGetImage: 'ecr:BatchGetImage',
      completeLayerUpload: 'ecr:CompleteLayerUpload',
      createRepository: 'ecr:CreateRepository',
      deleteLifecyclePolicy: 'ecr:DeleteLifecyclePolicy',
      deleteRepository: 'ecr:DeleteRepository',
      deleteRepositoryPolicy: 'ecr:DeleteRepositoryPolicy',
      describeImages: 'ecr:DescribeImages',
      describeRepositories: 'ecr:DescribeRepositories',
      getAuthorizationToken: 'ecr:GetAuthorizationToken',
      getDownloadUrlForLayer: 'ecr:GetDownloadUrlForLayer',
      getLifecyclePolicy: 'ecr:GetLifecyclePolicy',
      getLifecyclePolicyPreview: 'ecr:GetLifecyclePolicyPreview',
      getRepositoryPolicy: 'ecr:GetRepositoryPolicy',
      initiateLayerUpload: 'ecr:InitiateLayerUpload',
      listImages: 'ecr:ListImages',
      listTagsForResource: 'ecr:ListTagsForResource',
      putImage: 'ecr:PutImage',
      putLifecyclePolicy: 'ecr:PutLifecyclePolicy',
      setRepositoryPolicy: 'ecr:SetRepositoryPolicy',
      startLifecyclePolicyPreview: 'ecr:StartLifecyclePolicyPreview',
      tagResource: 'ecr:TagResource',
      untagResource: 'ecr:UntagResource',
      uploadLayerPart: 'ecr:UploadLayerPart'
    },
    ecs: {
      createCluster: 'ecs:CreateCluster',
      createService: 'ecs:CreateService',
      createTaskSet: 'ecs:CreateTaskSet',
      deleteAccountSetting: 'ecs:DeleteAccountSetting',
      deleteAttributes: 'ecs:DeleteAttributes',
      deleteCluster: 'ecs:DeleteCluster',
      deleteService: 'ecs:DeleteService',
      deleteTaskSet: 'ecs:DeleteTaskSet',
      deregisterContainerInstance: 'ecs:DeregisterContainerInstance',
      deregisterTaskDefinition: 'ecs:DeregisterTaskDefinition',
      describeClusters: 'ecs:DescribeClusters',
      describeContainerInstances: 'ecs:DescribeContainerInstances',
      describeServices: 'ecs:DescribeServices',
      describeTaskDefinition: 'ecs:DescribeTaskDefinition',
      describeTaskSets: 'ecs:DescribeTaskSets',
      describeTasks: 'ecs:DescribeTasks',
      discoverPollEndpoint: 'ecs:DiscoverPollEndpoint',
      listAccountSettings: 'ecs:ListAccountSettings',
      listAttributes: 'ecs:ListAttributes',
      listClusters: 'ecs:ListClusters',
      listContainerInstances: 'ecs:ListContainerInstances',
      listServices: 'ecs:ListServices',
      listTagsForResource: 'ecs:ListTagsForResource',
      listTaskDefinitionFamilies: 'ecs:ListTaskDefinitionFamilies',
      listTaskDefinitions: 'ecs:ListTaskDefinitions',
      listTasks: 'ecs:ListTasks',
      poll: 'ecs:Poll',
      putAccountSetting: 'ecs:PutAccountSetting',
      putAccountSettingDefault: 'ecs:PutAccountSettingDefault',
      putAttributes: 'ecs:PutAttributes',
      pegisterContainerInstance: 'ecs:RegisterContainerInstance',
      registerTaskDefinition: 'ecs:RegisterTaskDefinition',
      runTask: 'ecs:RunTask',
      startTask: 'ecs:StartTask',
      stopTask: 'ecs:StopTask',
      submitContainerStateChange: 'ecs:SubmitContainerStateChange',
      submitTaskStateChange: 'ecs:SubmitTaskStateChange',
      tagResource: 'ecs:TagResource',
      untagResource: 'ecs:UntagResource',
      updateContainerAgent: 'ecs:UpdateContainerAgent',
      updateContainerInstancesState: 'ecs:UpdateContainerInstancesState',
      updateService: 'ecs:UpdateService',
      updateServicePrimaryTaskSet: 'ecs:UpdateServicePrimaryTaskSet',
      updateTaskSet: 'ecs:UpdateTaskSet'
    },
    iam: {
      addClientIDToOpenIDConnectProvider: 'iam:AddClientIDToOpenIDConnectProvider',
      addRoleToInstanceProfile: 'iam:AddRoleToInstanceProfile',
      addUserToGroup: 'iam:AddUserToGroup',
      attachGroupPolicy: 'iam:AttachGroupPolicy',
      attachRolePolicy: 'iam:AttachRolePolicy',
      attachUserPolicy: 'iam:AttachUserPolicy',
      changePassword: 'iam:ChangePassword',
      createAccessKey: 'iam:CreateAccessKey',
      createAccountAlias: 'iam:CreateAccountAlias',
      createGroup: 'iam:CreateGroup',
      createInstanceProfile: 'iam:CreateInstanceProfile',
      createLoginProfile: 'iam:CreateLoginProfile',
      createOpenIDConnectProvider: 'iam:CreateOpenIDConnectProvider',
      createPolicy: 'iam:CreatePolicy',
      createPolicyVersion: 'iam:CreatePolicyVersion',
      createRole: 'iam:CreateRole',
      createSAMLProvider: 'iam:CreateSAMLProvider',
      createServiceLinkedRole: 'iam:CreateServiceLinkedRole',
      createServiceSpecificCredential: 'iam:CreateServiceSpecificCredential',
      createUser: 'iam:CreateUser',
      createVirtualMFADevice: 'iam:CreateVirtualMFADevice',
      deactivateMFADevice: 'iam:DeactivateMFADevice',
      deleteAccessKey: 'iam:DeleteAccessKey',
      deleteAccountAlias: 'iam:DeleteAccountAlias',
      deleteAccountPasswordPolicy: 'iam:DeleteAccountPasswordPolicy',
      deleteGroup: 'iam:DeleteGroup',
      deleteGroupPolicy: 'iam:DeleteGroupPolicy',
      deleteInstanceProfile: 'iam:DeleteInstanceProfile',
      deleteLoginProfile: 'iam:DeleteLoginProfile',
      deleteOpenIDConnectProvider: 'iam:DeleteOpenIDConnectProvider',
      deletePolicy: 'iam:DeletePolicy',
      deletePolicyVersion: 'iam:DeletePolicyVersion',
      deleteRole: 'iam:DeleteRole',
      deleteRolePermissionsBoundary: 'iam:DeleteRolePermissionsBoundary',
      deleteRolePolicy: 'iam:DeleteRolePolicy',
      deleteSAMLProvider: 'iam:DeleteSAMLProvider',
      deleteSSHPublicKey: 'iam:DeleteSSHPublicKey',
      deleteServerCertificate: 'iam:DeleteServerCertificate',
      deleteServiceLinkedRole: 'iam:DeleteServiceLinkedRole',
      deleteServiceSpecificCredential: 'iam:DeleteServiceSpecificCredential',
      deleteSigningCertificate: 'iam:DeleteSigningCertificate',
      deleteUser: 'iam:DeleteUser',
      dDleteUserPermissionsBoundary: 'iam:DeleteUserPermissionsBoundary',
      deleteUserPolicy: 'iam:DeleteUserPolicy',
      deleteVirtualMFADevice: 'iam:DeleteVirtualMFADevice',
      detachGroupPolicy: 'iam:DetachGroupPolicy',
      detachRolePolicy: 'iam:DetachRolePolicy',
      detachUserPolicy: 'iam:DetachUserPolicy',
      enableMFADevice: 'iam:EnableMFADevice',
      generateCredentialReport: 'iam:GenerateCredentialReport',
      generateOrganizationsAccessReport: 'iam:GenerateOrganizationsAccessReport',
      generateServiceLastAccessedDetails: 'iam:GenerateServiceLastAccessedDetails',
      getAccessKeyLastUsed: 'iam:GetAccessKeyLastUsed',
      getAccountAuthorizationDetails: 'iam:GetAccountAuthorizationDetails',
      getAccountPasswordPolicy: 'iam:GetAccountPasswordPolicy',
      getAccountSummary: 'iam:GetAccountSummary',
      getContextKeysForCustomPolicy: 'iam:GetContextKeysForCustomPolicy',
      getContextKeysForPrincipalPolicy: 'iam:GetContextKeysForPrincipalPolicy',
      getCredentialReport: 'iam:GetCredentialReport',
      getGroup: 'iam:GetGroup',
      getGroupPolicy: 'iam:GetGroupPolicy',
      getInstanceProfile: 'iam:GetInstanceProfile',
      getLoginProfile: 'iam:GetLoginProfile',
      getOpenIDConnectProvider: 'iam:GetOpenIDConnectProvider',
      getOrganizationsAccessReport: 'iam:GetOrganizationsAccessReport',
      getPolicy: 'iam:GetPolicy',
      getPolicyVersion: 'iam:GetPolicyVersion',
      getRole: 'iam:GetRole',
      getRolePolicy: 'iam:GetRolePolicy',
      getSAMLProvider: 'iam:GetSAMLProvider',
      getSSHPublicKey: 'iam:GetSSHPublicKey',
      getServerCertificate: 'iam:GetServerCertificate',
      gGetServiceLastAccessedDetails: 'iam:GetServiceLastAccessedDetails',
      getServiceLastAccessedDetailsWithEntities: 'iam:GetServiceLastAccessedDetailsWithEntities',
      getServiceLinkedRoleDeletionStatus: 'iam:GetServiceLinkedRoleDeletionStatus',
      getUser: 'iam:GetUser',
      getUserPolicy: 'iam:GetUserPolicy',
      listAccessKeys: 'iam:ListAccessKeys',
      listAccountAliases: 'iam:ListAccountAliases',
      listAttachedGroupPolicies: 'iam:ListAttachedGroupPolicies',
      listAttachedRolePolicies: 'iam:ListAttachedRolePolicies',
      listAttachedUserPolicies: 'iam:ListAttachedUserPolicies',
      listEntitiesForPolicy: 'iam:ListEntitiesForPolicy',
      listGroupPolicies: 'iam:ListGroupPolicies',
      listGroups: 'iam:ListGroups',
      listGroupsForUser: 'iam:ListGroupsForUser',
      listInstanceProfiles: 'iam:ListInstanceProfiles',
      listInstanceProfilesForRole: 'iam:ListInstanceProfilesForRole',
      listMFADevices: 'iam:ListMFADevices',
      listOpenIDConnectProviders: 'iam:ListOpenIDConnectProviders',
      listPolicies: 'iam:ListPolicies',
      listPoliciesGrantingServiceAccess: 'iam:ListPoliciesGrantingServiceAccess',
      listPolicyVersions: 'iam:ListPolicyVersions',
      listRolePolicies: 'iam:ListRolePolicies',
      listRoleTags: 'iam:ListRoleTags',
      listRoles: 'iam:ListRoles',
      listSAMLProviders: 'iam:ListSAMLProviders',
      listSSHPublicKeys: 'iam:ListSSHPublicKeys',
      listServerCertificates: 'iam:ListServerCertificates',
      listServiceSpecificCredentials: 'iam:ListServiceSpecificCredentials',
      listSigningCertificates: 'iam:ListSigningCertificates',
      listUserPolicies: 'iam:ListUserPolicies',
      listUserTags: 'iam:ListUserTags',
      listUsers: 'iam:ListUsers',
      listVirtualMFADevices: 'iam:ListVirtualMFADevices',
      passRole: 'iam:PassRole',
      putGroupPolicy: 'iam:PutGroupPolicy',
      putRolePermissionsBoundary: 'iam:PutRolePermissionsBoundary',
      putRolePolicy: 'iam:PutRolePolicy',
      putUserPermissionsBoundary: 'iam:PutUserPermissionsBoundary',
      putUserPolicy: 'iam:PutUserPolicy',
      removeClientIDFromOpenIDConnectProvider: 'iam:RemoveClientIDFromOpenIDConnectProvider',
      removeRoleFromInstanceProfile: 'iam:RemoveRoleFromInstanceProfile',
      removeUserFromGroup: 'iam:RemoveUserFromGroup',
      resetServiceSpecificCredential: 'iam:ResetServiceSpecificCredential',
      resyncMFADevice: 'iam:ResyncMFADevice',
      setDefaultPolicyVersion: 'iam:SetDefaultPolicyVersion',
      detSecurityTokenServicePreferences: 'iam:SetSecurityTokenServicePreferences',
      dimulateCustomPolicy: 'iam:SimulateCustomPolicy',
      dimulatePrincipalPolicy: 'iam:SimulatePrincipalPolicy',
      tagRole: 'iam:TagRole',
      tagUser: 'iam:TagUser',
      untagRole: 'iam:UntagRole',
      untagUser: 'iam:UntagUser',
      updateAccessKey: 'iam:UpdateAccessKey',
      updateAccountPasswordPolicy: 'iam:UpdateAccountPasswordPolicy',
      updateAssumeRolePolicy: 'iam:UpdateAssumeRolePolicy',
      updateGroup: 'iam:UpdateGroup',
      updateLoginProfile: 'iam:UpdateLoginProfile',
      updateOpenIDConnectProviderThumbprint: 'iam:UpdateOpenIDConnectProviderThumbprint',
      updateRole: 'iam:UpdateRole',
      updateRoleDescription: 'iam:UpdateRoleDescription',
      updateSAMLProvider: 'iam:UpdateSAMLProvider',
      updateSSHPublicKey: 'iam:UpdateSSHPublicKey',
      updateServerCertificate: 'iam:UpdateServerCertificate',
      updateServiceSpecificCredential: 'iam:UpdateServiceSpecificCredential',
      updateSigningCertificate: 'iam:UpdateSigningCertificate',
      updateUser: 'iam:UpdateUser',
      uploadSSHPublicKey: 'iam:UploadSSHPublicKey',
      uploadServerCertificate: 'iam:UploadServerCertificate',
      uploadSigningCertificate: 'iam:UploadSigningCertificate'
    },
    lambda: {
      addLayerVersionPermission: 'lambda:AddLayerVersionPermission',
      addPermission: 'lambda:AddPermission',
      createAlias: 'lambda:CreateAlias',
      createEventSourceMapping: 'lambda:CreateEventSourceMapping',
      createFunction: 'lambda:CreateFunction',
      deleteAlias: 'lambda:DeleteAlias',
      deleteEventSourceMapping: 'lambda:DeleteEventSourceMapping',
      deleteFunction: 'lambda:DeleteFunction',
      deleteFunctionConcurrency: 'lambda:DeleteFunctionConcurrency',
      deleteLayerVersion: 'lambda:DeleteLayerVersion',
      enableReplication: 'lambda:EnableReplication',
      getAccountSettings: 'lambda:GetAccountSettings',
      getAlias: 'lambda:GetAlias',
      getEventSourceMapping: 'lambda:GetEventSourceMapping',
      getFunction: 'lambda:GetFunction',
      getFunctionConfiguration: 'lambda:GetFunctionConfiguration',
      getLayerVersion: 'lambda:GetLayerVersion',
      getLayerVersionPolicy: 'lambda:GetLayerVersionPolicy',
      getPolicy: 'lambda:GetPolicy',
      invokeAsync: 'lambda:InvokeAsync',
      invokeFunction: 'lambda:InvokeFunction',
      listAliases: 'lambda:ListAliases',
      listEventSourceMappings: 'lambda:ListEventSourceMappings',
      listFunctions: 'lambda:ListFunctions',
      listLayerVersions: 'lambda:ListLayerVersions',
      listLayers: 'lambda:ListLayers',
      listTags: 'lambda:ListTags',
      listVersionsByFunction: 'lambda:ListVersionsByFunction',
      publishLayerVersion: 'lambda:PublishLayerVersion',
      publishVersion: 'lambda:PublishVersion',
      putFunctionConcurrency: 'lambda:PutFunctionConcurrency',
      removeLayerVersionPermission: 'lambda:RemoveLayerVersionPermission',
      removePermission: 'lambda:RemovePermission',
      tagResource: 'lambda:TagResource',
      untagResource: 'lambda:UntagResource',
      updateAlias: 'lambda:UpdateAlias',
      updateEventSourceMapping: 'lambda:UpdateEventSourceMapping',
      updateFunctionCode: 'lambda:UpdateFunctionCode',
      updateFunctionConfiguration: 'lambda:UpdateFunctionConfiguration'
    },
    ses: {
      cloneReceiptRuleSet: 'ses:CloneReceiptRuleSet',
      createConfigurationSet: 'ses:CreateConfigurationSet',
      createConfigurationSetEventDestination: 'ses:CreateConfigurationSetEventDestination',
      createConfigurationSetTrackingOptions: 'ses:CreateConfigurationSetTrackingOptions',
      createCustomVerificationEmailTemplate: 'ses:CreateCustomVerificationEmailTemplate',
      createReceiptFilter: 'ses:CreateReceiptFilter',
      createReceiptRule: 'ses:CreateReceiptRule',
      createReceiptRuleSet: 'ses:CreateReceiptRuleSet',
      createTemplate: 'ses:CreateTemplate',
      deleteConfigurationSet: 'ses:DeleteConfigurationSet',
      deleteConfigurationSetEventDestination: 'ses:DeleteConfigurationSetEventDestination',
      deleteConfigurationSetTrackingOptions: 'ses:DeleteConfigurationSetTrackingOptions',
      deleteCustomVerificationEmailTemplate: 'ses:DeleteCustomVerificationEmailTemplate',
      deleteIdentity: 'ses:DeleteIdentity',
      deleteIdentityPolicy: 'ses:DeleteIdentityPolicy',
      deleteReceiptFilter: 'ses:DeleteReceiptFilter',
      deleteReceiptRule: 'ses:DeleteReceiptRule',
      deleteReceiptRuleSet: 'ses:DeleteReceiptRuleSet',
      deleteTemplate: 'ses:DeleteTemplate',
      deleteVerifiedEmailAddress: 'ses:DeleteVerifiedEmailAddress',
      describeActiveReceiptRuleSet: 'ses:DescribeActiveReceiptRuleSet',
      describeConfigurationSet: 'ses:DescribeConfigurationSet',
      describeReceiptRule: 'ses:DescribeReceiptRule',
      describeReceiptRuleSet: 'ses:DescribeReceiptRuleSet',
      getAccountSendingEnabled: 'ses:GetAccountSendingEnabled',
      getCustomVerificationEmailTemplate: 'ses:GetCustomVerificationEmailTemplate',
      getIdentityDkimAttributes: 'ses:GetIdentityDkimAttributes',
      getIdentityMailFromDomainAttributes: 'ses:GetIdentityMailFromDomainAttributes',
      getIdentityNotificationAttributes: 'ses:GetIdentityNotificationAttributes',
      getIdentityPolicies: 'ses:GetIdentityPolicies',
      getIdentityVerificationAttributes: 'ses:GetIdentityVerificationAttributes',
      getSendQuota: 'ses:GetSendQuota',
      getSendStatistics: 'ses:GetSendStatistics',
      getTemplate: 'ses:GetTemplate',
      listConfigurationSets: 'ses:ListConfigurationSets',
      listCustomVerificationEmailTemplates: 'ses:ListCustomVerificationEmailTemplates',
      listIdentities: 'ses:ListIdentities',
      listIdentityPolicies: 'ses:ListIdentityPolicies',
      listReceiptFilters: 'ses:ListReceiptFilters',
      listReceiptRuleSets: 'ses:ListReceiptRuleSets',
      listTemplates: 'ses:ListTemplates',
      listVerifiedEmailAddresses: 'ses:ListVerifiedEmailAddresses',
      putIdentityPolicy: 'ses:PutIdentityPolicy',
      reorderReceiptRuleSet: 'ses:ReorderReceiptRuleSet',
      sendBounce: 'ses:SendBounce',
      sendBulkTemplatedEmail: 'ses:SendBulkTemplatedEmail',
      sendCustomVerificationEmail: 'ses:SendCustomVerificationEmail',
      sendEmail: 'ses:SendEmail',
      sendRawEmail: 'ses:SendRawEmail',
      sendTemplatedEmail: 'ses:SendTemplatedEmail',
      setActiveReceiptRuleSet: 'ses:SetActiveReceiptRuleSet',
      setIdentityDkimEnabled: 'ses:SetIdentityDkimEnabled',
      setIdentityFeedbackForwardingEnabled: 'ses:SetIdentityFeedbackForwardingEnabled',
      setIdentityHeadersInNotificationsEnabled: 'ses:SetIdentityHeadersInNotificationsEnabled',
      setIdentityMailFromDomain: 'ses:SetIdentityMailFromDomain',
      setIdentityNotificationTopic: 'ses:SetIdentityNotificationTopic',
      setReceiptRulePosition: 'ses:SetReceiptRulePosition',
      testRenderTemplate: 'ses:TestRenderTemplate',
      updateAccountSendingEnabled: 'ses:UpdateAccountSendingEnabled',
      updateConfigurationSetEventDestination: 'ses:UpdateConfigurationSetEventDestination',
      updateConfigurationSetReputationMetricsEnabled:
        'ses:UpdateConfigurationSetReputationMetricsEnabled',
      updateConfigurationSetSendingEnabled: 'ses:UpdateConfigurationSetSendingEnabled',
      updateConfigurationSetTrackingOptions: 'ses:UpdateConfigurationSetTrackingOptions',
      updateCustomVerificationEmailTemplate: 'ses:UpdateCustomVerificationEmailTemplate',
      updateReceiptRule: 'ses:UpdateReceiptRule',
      updateTemplate: 'ses:UpdateTemplate',
      verifyDomainDkim: 'ses:VerifyDomainDkim',
      verifyDomainIdentity: 'ses:VerifyDomainIdentity',
      verifyEmailAddress: 'ses:VerifyEmailAddress',
      verifyEmailIdentity: 'ses:VerifyEmailIdentity'
    },
    sns: {
      addPermission: 'sns:AddPermission',
      checkIfPhoneNumberIsOptedOut: 'sns:CheckIfPhoneNumberIsOptedOut',
      confirmSubscription: 'sns:ConfirmSubscription',
      createPlatformApplication: 'sns:CreatePlatformApplication',
      createPlatformEndpoint: 'sns:CreatePlatformEndpoint',
      createTopic: 'sns:CreateTopic',
      deleteEndpoint: 'sns:DeleteEndpoint',
      deletePlatformApplication: 'sns:DeletePlatformApplication',
      deleteTopic: 'sns:DeleteTopic',
      getEndpointAttributes: 'sns:GetEndpointAttributes',
      getPlatformApplicationAttributes: 'sns:GetPlatformApplicationAttributes',
      getSMSAttributes: 'sns:GetSMSAttributes',
      getSubscriptionAttributes: 'sns:GetSubscriptionAttributes',
      getTopicAttributes: 'sns:GetTopicAttributes',
      listEndpointsByPlatformApplication: 'sns:ListEndpointsByPlatformApplication',
      listPhoneNumbersOptedOut: 'sns:ListPhoneNumbersOptedOut',
      listPlatformApplications: 'sns:ListPlatformApplications',
      listSubscriptions: 'sns:ListSubscriptions',
      listSubscriptionsByTopic: 'sns:ListSubscriptionsByTopic',
      listTopics: 'sns:ListTopics',
      optInPhoneNumber: 'sns:OptInPhoneNumber',
      publish: 'sns:Publish',
      removePermission: 'sns:RemovePermission',
      setEndpointAttributes: 'sns:SetEndpointAttributes',
      setPlatformApplicationAttributes: 'sns:SetPlatformApplicationAttributes',
      setSubscriptionAttributes: 'sns:SetSubscriptionAttributes',
      setTopicAttributes: 'sns:SetTopicAttributes',
      subscribe: 'sns:Subscribe',
      unsubscribe: 'sns:Unsubscribe'
    },
    sqs: {
      addPermission: 'sqs:AddPermission',
      changeMessageVisibility: 'sqs:ChangeMessageVisibility',
      changeMessageVisibilityBatch: 'sqs:ChangeMessageVisibilityBatch',
      createQueue: 'sqs:CreateQueue',
      deleteMessage: 'sqs:DeleteMessage',
      deleteMessageBatch: 'sqs:DeleteMessageBatch',
      deleteQueue: 'sqs:DeleteQueue',
      getQueueAttributes: 'sqs:GetQueueAttributes',
      getQueueUrl: 'sqs:GetQueueUrl',
      listDeadLetterSourceQueues: 'sqs:ListDeadLetterSourceQueues',
      listQueueTags: 'sqs:ListQueueTags',
      listQueues: 'sqs:ListQueues',
      purgeQueue: 'sqs:PurgeQueue',
      receiveMessage: 'sqs:ReceiveMessage',
      removePermission: 'sqs:RemovePermission',
      sendMessage: 'sqs:SendMessage',
      sendMessageBatch: 'sqs:SendMessageBatch',
      setQueueAttributes: 'sqs:SetQueueAttributes',
      tagQueue: 'sqs:TagQueue',
      untagQueue: 'sqs:UntagQueue'
    },
    sts: {
      assumeRole: 'sts:AssumeRole',
      assumeRoleWithSAML: 'sts:AssumeRoleWithSAML',
      assumeRoleWithWebIdentity: 'sts:AssumeRoleWithWebIdentity',
      decodeAuthorizationMessage: 'sts:DecodeAuthorizationMessage',
      getCallerIdentity: 'sts:GetCallerIdentity',
      getFederationToken: 'sts:GetFederationToken'
    }
  }
}
